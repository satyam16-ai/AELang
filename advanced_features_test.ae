extern print(format: str, ...);

// Test global variables
let global_x: i32 = 100;
let global_pi: f32 = 3.14159;

// Test constants
const MAX_SIZE: i32 = 1000;
const MIN_VALUE: i32 = -50;

// Simple function
func simple_add(a: i32, b: i32): i32 {
    return a + b;
}

// Recursive function - factorial
func factorial(n: i32): i32 {
    if (n <= 1) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

// Function with local scope
func test_scoping(): void {
    let local_x: i32 = 42;  // Local variable shadows global
    print("Local x: %d\n", local_x);
    print("Global x: %d\n", global_x);
}

// Function that modifies global
func modify_global(): void {
    global_x = global_x + 10;
}

func main(): void {
    print("=== Advanced Function and Scoping Test ===\n");
    
    // Test global variables
    print("Initial global_x: %d\n", global_x);
    print("Global pi: %.2f\n", global_pi);
    
    // Test constants
    print("MAX_SIZE constant: %d\n", MAX_SIZE);
    print("MIN_VALUE constant: %d\n", MIN_VALUE);
    
    // Test simple function
    let sum: i32 = simple_add(15, 27);
    print("15 + 27 = %d\n", sum);
    
    // Test recursion
    let fact_5: i32 = factorial(5);
    print("5! = %d\n", fact_5);
    
    // Test scoping
    test_scoping();
    
    // Test global modification
    modify_global();
    print("Modified global_x: %d\n", global_x);
    
    // Test nested scope
    let outer_var: i32 = 99;
    if (outer_var > 50) {
        let inner_var: i32 = outer_var * 2;
        print("Inner scope: %d\n", inner_var);
    }
    print("Back to outer scope: %d\n", outer_var);
}
