extern print(format: str, ...);
extern read(): num;

func test_all_data_types(): void {
    print("=== ÆLang Comprehensive Data Type Test ===\n");
    
    // Test all integer types
    print("\n--- Integer Types ---\n");
    let test_i8: i8 = 127;
    let test_i16: i16 = 32767;
    let test_i32: i32 = 2147483647;
    let test_i64: i64 = 9223372036854775807;
    
    let test_u8: u8 = 255;
    let test_u16: u16 = 65535;
    let test_u32: u32 = 4294967295;
    let test_u64: u64 = 18446744073709551615;
    
    print("i8 max: %d\n", test_i8);
    print("i16 max: %d\n", test_i16);
    print("i32 max: %d\n", test_i32);
    print("i64 max: %lld\n", test_i64);
    print("u8 max: %u\n", test_u8);
    print("u16 max: %u\n", test_u16);
    print("u32 max: %u\n", test_u32);
    print("u64 max: %llu\n", test_u64);
    
    // Test all float types including F8/F16
    print("\n--- Floating Point Types ---\n");
    let test_f8: f8 = 3.5;
    let test_f16: f16 = 1.234;
    let test_f32: f32 = 3.141592;
    let test_f64: f64 = 2.718281828459045;
    
    print("f8 value: %f\n", test_f8);
    print("f16 value: %f\n", test_f16);
    print("f32 value: %f\n", test_f32);
    print("f64 value: %f\n", test_f64);
    
    // Test arithmetic with all types
    print("\n--- Arithmetic Operations ---\n");
    let f8_result: f8 = test_f8 + 1.5;
    let f16_result: f16 = test_f16 * 2.0;
    let f32_result: f32 = test_f32 / 2.0;
    let f64_result: f64 = test_f64 + 1.0;
    
    print("f8: 3.5 + 1.5 = %f\n", f8_result);
    print("f16: 1.234 * 2.0 = %f\n", f16_result);
    print("f32: 3.141592 / 2.0 = %f\n", f32_result);
    print("f64: 2.718281828459045 + 1.0 = %f\n", f64_result);
    
    // Test other types
    print("\n--- Other Types ---\n");
    let test_bool: bool = true;
    let test_char: char = 'A';
    let test_num: num = 42.75;
    
    print("bool value: %s\n", test_bool ? "true" : "false");
    print("char value: %c\n", test_char);
    print("num value: %f\n", test_num);
}

func interactive_calculator(): void {
    print("\n=== Interactive ÆLang Calculator ===\n");
    print("Supports all numeric types: i8, i16, i32, i64, u8, u16, u32, u64, f8, f16, f32, f64, num\n");
    print("Running all calculator demos automatically!\n\n");
    
    print("--- Running All Calculator Demos ---\n");
    print("1. Basic Calculator (f32)\n");
    basic_f32_calculator();
    
    print("2. High Precision Calculator (f64)\n");
    precision_f64_calculator();
    
    print("3. Custom Float Calculator (f8)\n");
    custom_f8_calculator();
    
    print("4. Half Precision Calculator (f16)\n");
    half_precision_f16_calculator();
    
    print("5. Integer Calculator (i32)\n");
    integer_i32_calculator();
    
    print("6. Universal Calculator (num)\n");
    universal_num_calculator();
    
    print("All calculator demos completed!\n");
}

func basic_f32_calculator(): void {
    print("\n=== F32 Basic Calculator ===\n");
    print("Demo: Testing f32 arithmetic with predefined values\n");
    
    let num1: f32 = 15.75;
    let num2: f32 = 4.25;
    
    print("Testing with num1 = %f, num2 = %f\n", num1, num2);
    
    print("\nF32 arithmetic results:\n");
    let add_result: f32 = num1 + num2;
    print("%f + %f = %f\n", num1, num2, add_result);
    
    let sub_result: f32 = num1 - num2;
    print("%f - %f = %f\n", num1, num2, sub_result);
    
    let mul_result: f32 = num1 * num2;
    print("%f * %f = %f\n", num1, num2, mul_result);
    
    let div_result: f32 = num1 / num2;
    print("%f / %f = %f\n\n", num1, num2, div_result);
}

func precision_f64_calculator(): void {
    print("\n=== F64 High Precision Calculator ===\n");
    print("Testing f64 precision with mathematical constants\n");
    
    let pi: f64 = 3.141592653589793;
    let e: f64 = 2.718281828459045;
    
    print("π (pi) = %f\n", pi);
    print("e (euler) = %f\n", e);
    print("π + e = %f\n", pi + e);
    print("π * e = %f\n", pi * e);
    print("π / e = %f\n", pi / e);
    print("π² = %f\n", pi * pi);
    print("e² = %f\n", e * e);
    print("\n");
}

func custom_f8_calculator(): void {
    print("\n=== F8 Custom Float Calculator ===\n");
    print("Testing 8-bit custom float precision\n");
    print("F8 format: 1 sign + 4 exponent + 3 mantissa bits\n");
    
    let val1: f8 = 7.5;
    let val2: f8 = 2.25;
    let val3: f8 = 0.125;
    
    print("F8 test values:\n");
    print("val1 (7.5): %f\n", val1);
    print("val2 (2.25): %f\n", val2);
    print("val3 (0.125): %f\n", val3);
    
    print("\nF8 arithmetic:\n");
    print("%f + %f = %f\n", val1, val2, val1 + val2);
    print("%f - %f = %f\n", val1, val2, val1 - val2);
    print("%f * %f = %f\n", val1, val2, val1 * val2);
    print("%f / %f = %f\n", val1, val2, val1 / val2);
    print("\n");
}

func half_precision_f16_calculator(): void {
    print("\n=== F16 Half Precision Calculator ===\n");
    print("Testing IEEE 754 binary16 half-precision\n");
    print("F16 format: 1 sign + 5 exponent + 10 mantissa bits\n");
    
    let val1: f16 = 15.875;
    let val2: f16 = 3.14;
    let val3: f16 = 0.001;
    
    print("F16 test values:\n");
    print("val1 (15.875): %f\n", val1);
    print("val2 (3.14): %f\n", val2);
    print("val3 (0.001): %f\n", val3);
    
    print("\nF16 arithmetic:\n");
    print("%f + %f = %f\n", val1, val2, val1 + val2);
    print("%f - %f = %f\n", val1, val2, val1 - val2);
    print("%f * %f = %f\n", val1, val2, val1 * val2);
    print("%f / %f = %f\n", val1, val2, val1 / val2);
    
    print("\nF16 precision limits test:\n");
    let small: f16 = 0.0001;
    let large: f16 = 65504.0;
    print("Small value (0.0001): %f\n", small);
    print("Large value (65504): %f\n", large);
    print("\n");
}

func integer_i32_calculator(): void {
    print("\n=== I32 Integer Calculator ===\n");
    print("Demo: Testing i32 arithmetic with predefined values\n");
    
    let num1: i32 = 42;
    let num2: i32 = 7;
    
    print("Testing with num1 = %d, num2 = %d\n", num1, num2);
    print("\nInteger operations:\n");
    print("%d + %d = %d\n", num1, num2, num1 + num2);
    print("%d - %d = %d\n", num1, num2, num1 - num2);
    print("%d * %d = %d\n", num1, num2, num1 * num2);
    print("%d / %d = %d (integer division)\n", num1, num2, num1 / num2);
    print("\n");
}

func universal_num_calculator(): void {
    print("\n=== Universal NUM Calculator ===\n");
    print("NUM type automatically handles integers and floats\n");
    
    print("Enter first number (can be int or float): ");
    let num1: num = read();
    
    print("Enter second number (can be int or float): ");
    let num2: num = read();
    
    print("\nUniversal operations:\n");
    print("%f + %f = %f\n", num1, num2, num1 + num2);
    print("%f - %f = %f\n", num1, num2, num1 - num2);
    print("%f * %f = %f\n", num1, num2, num1 * num2);
    
    if (num2 != 0.0) {
        print("%f / %f = %f\n", num1, num2, num1 / num2);
    } else {
        print("Division by zero skipped\n");
    }
    print("\n");
}

func main(): void {
    print("╔══════════════════════════════════════════════════════════════════╗\n");
    print("║            ÆLang Complete Data Type & Calculator Test            ║\n");
    print("║          Testing F8, F16, F32, F64 + All Integer Types          ║\n");
    print("╚══════════════════════════════════════════════════════════════════╝\n");
    
    // First run comprehensive data type tests
    test_all_data_types();
    
    // Then run interactive calculator
    interactive_calculator();
    
    print("\n╔══════════════════════════════════════════════════════════════════╗\n");
    print("║                     All Tests Completed!                        ║\n");
    print("║         ÆLang supports all data types successfully!             ║\n");
    print("╚══════════════════════════════════════════════════════════════════╝\n");
}
