// Comprehensive ÆLang 64-bit Architecture Test
// Tests all data types with extreme values and edge cases
extern print(format: str, ...);
extern read();

// Test functions for each data type with full 64-bit precision
func test_signed_integers_64bit(): void {
    print("=== 64-bit SIGNED INTEGER TESTS ===\n");
    
    // i8 tests: -128 to 127
    print("--- i8 Tests (8-bit signed) ---\n");
    print("Enter i8 minimum (-128): ");
    let i8_min: i8 = read();
    print("i8 min: %d\n", i8_min);
    
    print("Enter i8 maximum (127): ");
    let i8_max: i8 = read();
    print("i8 max: %d\n", i8_max);
    
    // i16 tests: -32768 to 32767
    print("\n--- i16 Tests (16-bit signed) ---\n");
    print("Enter i16 minimum (-32768): ");
    let i16_min: i16 = read();
    print("i16 min: %d\n", i16_min);
    
    print("Enter i16 maximum (32767): ");
    let i16_max: i16 = read();
    print("i16 max: %d\n", i16_max);
    
    // i32 tests: -2147483648 to 2147483647
    print("\n--- i32 Tests (32-bit signed) ---\n");
    print("Enter i32 minimum (-2147483648): ");
    let i32_min: i32 = read();
    print("i32 min: %d\n", i32_min);
    
    print("Enter i32 maximum (2147483647): ");
    let i32_max: i32 = read();
    print("i32 max: %d\n", i32_max);
    
    // i64 tests: -9223372036854775808 to 9223372036854775807 (full 64-bit)
    print("\n--- i64 Tests (64-bit signed, full precision) ---\n");
    print("Enter i64 minimum (-9223372036854775808): ");
    let i64_min: i64 = read();
    print("i64 min: %ld\n", i64_min);
    
    print("Enter i64 maximum (9223372036854775807): ");
    let i64_max: i64 = read();
    print("i64 max: %ld\n", i64_max);
    
    print("Enter large i64 (1000000000000000000): ");
    let i64_large: i64 = read();
    print("i64 large: %ld\n", i64_large);
    
    print("Enter negative i64 (-1000000000000000000): ");
    let i64_neg_large: i64 = read();
    print("i64 negative large: %ld\n", i64_neg_large);
}

func test_unsigned_integers_64bit(): void {
    print("\n=== 64-bit UNSIGNED INTEGER TESTS ===\n");
    
    // u8 tests: 0 to 255
    print("--- u8 Tests (8-bit unsigned) ---\n");
    print("Enter u8 minimum (0): ");
    let u8_min: u8 = read();
    print("u8 min: %u\n", u8_min);
    
    print("Enter u8 maximum (255): ");
    let u8_max: u8 = read();
    print("u8 max: %u\n", u8_max);
    
    // u16 tests: 0 to 65535
    print("\n--- u16 Tests (16-bit unsigned) ---\n");
    print("Enter u16 minimum (0): ");
    let u16_min: u16 = read();
    print("u16 min: %u\n", u16_min);
    
    print("Enter u16 maximum (65535): ");
    let u16_max: u16 = read();
    print("u16 max: %u\n", u16_max);
    
    // u32 tests: 0 to 4294967295
    print("\n--- u32 Tests (32-bit unsigned) ---\n");
    print("Enter u32 minimum (0): ");
    let u32_min: u32 = read();
    print("u32 min: %u\n", u32_min);
    
    print("Enter u32 maximum (4294967295): ");
    let u32_max: u32 = read();
    print("u32 max: %u\n", u32_max);
    
    // u64 tests: 0 to 18446744073709551615 (full 64-bit)
    print("\n--- u64 Tests (64-bit unsigned, full precision) ---\n");
    print("Enter u64 minimum (0): ");
    let u64_min: u64 = read();
    print("u64 min: %lu\n", u64_min);
    
    print("Enter u64 maximum (18446744073709551615): ");
    let u64_max: u64 = read();
    print("u64 max: %lu\n", u64_max);
    
    print("Enter large u64 (10000000000000000000): ");
    let u64_large: u64 = read();
    print("u64 large: %lu\n", u64_large);
    
    print("Enter mid-range u64 (9876543210123456789): ");
    let u64_mid: u64 = read();
    print("u64 mid-range: %lu\n", u64_mid);
}

func test_floating_point_64bit(): void {
    print("\n=== 64-bit FLOATING POINT TESTS ===\n");
    
    // f32 tests with full precision
    print("--- f32 Tests (32-bit float, IEEE 754) ---\n");
    print("Enter f32 very small (1.175494e-38): ");
    let f32_tiny: f32 = read();
    print("f32 tiny: %f\n", f32_tiny);
    
    print("Enter f32 very large (3.402823e+38): ");
    let f32_huge: f32 = read();
    print("f32 huge: %f\n", f32_huge);
    
    print("Enter f32 precise (3.14159265): ");
    let f32_pi: f32 = read();
    print("f32 pi: %f\n", f32_pi);
    
    print("Enter f32 negative (-2.71828): ");
    let f32_neg_e: f32 = read();
    print("f32 negative e: %f\n", f32_neg_e);
    
    // f64 tests with double precision
    print("\n--- f64 Tests (64-bit double, IEEE 754) ---\n");
    print("Enter f64 very small (2.2250738585072014e-308): ");
    let f64_tiny: f64 = read();
    print("f64 tiny: %f\n", f64_tiny);
    
    print("Enter f64 very large (1.7976931348623157e+308): ");
    let f64_huge: f64 = read();
    print("f64 huge: %f\n", f64_huge);
    
    print("Enter f64 high precision (3.141592653589793238): ");
    let f64_pi: f64 = read();
    print("f64 high precision pi: %f\n", f64_pi);
    
    print("Enter f64 scientific notation (1.23456789e-100): ");
    let f64_sci: f64 = read();
    print("f64 scientific: %f\n", f64_sci);
    
    // num type tests (full 64-bit precision)
    print("\n--- num Tests (flexible numeric type, 64-bit) ---\n");
    print("Enter num as large integer (999999999999): ");
    let num_big_int: num = read();
    print("num big int: %g\n", num_big_int);
    
    print("Enter num as precise float (2.718281828459045): ");
    let num_precise: num = read();
    print("num precise: %g\n", num_precise);
    
    print("Enter num in scientific notation (6.02214076e+23): ");
    let num_avogadro: num = read();
    print("num Avogadro: %g\n", num_avogadro);
}

func test_other_types_64bit(): void {
    print("\n=== 64-bit OTHER TYPE TESTS ===\n");
    
    // Boolean tests (same across architectures)
    print("--- Boolean Tests ---\n");
    print("Enter true: ");
    let bool_true: bool = read();
    print("Bool true: %t\n", bool_true);
    
    print("Enter false: ");
    let bool_false: bool = read();
    print("Bool false: %t\n", bool_false);
    
    print("Enter TRUE (uppercase): ");
    let bool_upper: bool = read();
    print("Bool uppercase: %t\n", bool_upper);
    
    print("Enter False (mixed case): ");
    let bool_mixed: bool = read();
    print("Bool mixed case: %t\n", bool_mixed);
    
    // Character tests (extended ASCII/Unicode)
    print("\n--- Character Tests ---\n");
    print("Enter ASCII letter (Z): ");
    let char_letter: char = read();
    print("Char letter: %c\n", char_letter);
    
    print("Enter ASCII digit (9): ");
    let char_digit: char = read();
    print("Char digit: %c\n", char_digit);
    
    print("Enter ASCII symbol (@): ");
    let char_symbol: char = read();
    print("Char symbol: %c\n", char_symbol);
    
    print("Enter ASCII control char (tab): ");
    let char_tab: char = read();
    print("Char tab: '%c'\n", char_tab);
}

func test_extreme_edge_cases_64bit(): void {
    print("\n=== 64-bit EXTREME EDGE CASE TESTS ===\n");
    
    // Maximum capacity tests
    print("--- Maximum Capacity Tests ---\n");
    print("Enter i64 near max (9223372036854775806): ");
    let i64_near_max: i64 = read();
    print("i64 near max: %ld\n", i64_near_max);
    
    print("Enter u64 near max (18446744073709551614): ");
    let u64_near_max: u64 = read();
    print("u64 near max: %lu\n", u64_near_max);
    
    // Floating point special cases
    print("\n--- Floating Point Edge Cases ---\n");
    print("Enter very small f32 (0.000000001): ");
    let f32_micro: f32 = read();
    print("f32 micro: %f\n", f32_micro);
    
    print("Enter f64 with many decimals (0.123456789012345): ");
    let f64_decimals: f64 = read();
    print("f64 decimals: %f\n", f64_decimals);
    
    print("Enter negative f64 (-999999999999.999999): ");
    let f64_neg_large: f64 = read();
    print("f64 negative large: %f\n", f64_neg_large);
    
    // Boundary crossing tests
    print("\n--- Architecture Boundary Tests ---\n");
    print("Enter value crossing 32-bit boundary (4294967296): ");
    let boundary_cross: u64 = read();
    print("Boundary cross u64: %lu\n", boundary_cross);
    
    print("Enter signed boundary cross (-2147483649): ");
    let signed_boundary: i64 = read();
    print("Signed boundary i64: %ld\n", signed_boundary);
    
    // Precision tests
    print("\n--- Precision Tests ---\n");
    print("Enter f32 precision limit (16777216.0): ");
    let f32_precision: f32 = read();
    print("f32 precision: %f\n", f32_precision);
    
    print("Enter f64 with 15 significant digits: ");
    let f64_sig_digits: f64 = read();
    print("f64 significant: %f\n", f64_sig_digits);
}

func test_mixed_operations_64bit(): void {
    print("\n=== 64-bit MIXED OPERATION TESTS ===\n");
    
    // Test type mixing and conversions
    print("--- Type Mixing Tests ---\n");
    print("Enter i32 for mixing test: ");
    let mix_i32: i32 = read();
    print("Mixed i32: %d\n", mix_i32);
    
    print("Enter f64 for mixing test: ");
    let mix_f64: f64 = read();
    print("Mixed f64: %f\n", mix_f64);
    
    print("Enter u64 for mixing test: ");
    let mix_u64: u64 = read();
    print("Mixed u64: %lu\n", mix_u64);
    
    // Sequential reads test
    print("\n--- Sequential Read Tests ---\n");
    print("Enter 5 consecutive i16 values:\n");
    let seq1: i16 = read();
    let seq2: i16 = read();
    let seq3: i16 = read();
    let seq4: i16 = read();
    let seq5: i16 = read();
    
    print("Sequential i16 values: %d, %d, %d, %d, %d\n", seq1, seq2, seq3, seq4, seq5);
    
    // Alternating type reads
    print("\n--- Alternating Type Read Tests ---\n");
    print("Enter alternating types (u8, f32, bool):\n");
    let alt_u8: u8 = read();
    let alt_f32: f32 = read();
    let alt_bool: bool = read();
    
    print("Alternating: u8=%u, f32=%f, bool=%t\n", alt_u8, alt_f32, alt_bool);
}

func main(): void {
    print("╔══════════════════════════════════════════════════════════════════╗\n");
    print("║              ÆLang 64-bit Comprehensive Test Suite              ║\n");
    print("║        Testing All Data Types with Full Precision              ║\n");
    print("╚══════════════════════════════════════════════════════════════════╝\n\n");
    
    print("Architecture: 64-bit mode (full precision)\n");
    print("Testing: All primitive types with extreme and edge case values\n");
    print("Coverage: Maximum ranges, precision limits, boundary conditions\n\n");
    
    test_signed_integers_64bit();
    test_unsigned_integers_64bit();
    test_floating_point_64bit();
    test_other_types_64bit();
    test_extreme_edge_cases_64bit();
    test_mixed_operations_64bit();
    
    print("\n╔══════════════════════════════════════════════════════════════════╗\n");
    print("║                    64-bit Test Suite Complete                   ║\n");
    print("║     All data types tested with full precision and edge cases    ║\n");
    print("║          Ready for production deployment verification           ║\n");
    print("╚══════════════════════════════════════════════════════════════════╝\n");
}
