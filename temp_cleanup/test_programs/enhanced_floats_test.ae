// ÆLang Enhanced Floating Point Types Test Program
// Testing 32-bit and 64-bit floating point numbers

extern print_f32(val: f32);
extern print_f64(val: f64);

func main(): void {
    print("=== ÆLang Enhanced Floating Point Types Test ===");
    print("");
    
    print("=== 32-BIT FLOATING POINT ===");
    let pi_f32: f32 = 3.14159265;
    let e_f32: f32 = 2.71828182;
    let small_f32: f32 = 0.000123;
    
    print("π (32-bit): 3.14159265");
    print_f32(pi_f32);
    print("e (32-bit): 2.71828182");
    print_f32(e_f32);
    print("Small number: 0.000123");
    print_f32(small_f32);
    print("");
    
    print("=== 64-BIT FLOATING POINT ===");
    let pi_f64: f64 = 3.141592653589793238;
    let e_f64: f64 = 2.718281828459045235;
    let small_f64: f64 = 0.000000000123456789;
    
    print("π (64-bit): 3.141592653589793238");
    print_f64(pi_f64);
    print("e (64-bit): 2.718281828459045235");
    print_f64(e_f64);
    print("Small number: 0.000000000123456789");
    print_f64(small_f64);
    print("");
    
    print("=== FLOATING POINT ARITHMETIC ===");
    let a: f32 = 10.5;
    let b: f32 = 3.2;
    
    let sum: f32 = a + b;
    let diff: f32 = a - b;
    let prod: f32 = a * b;
    let quot: f32 = a / b;
    
    print("10.5 + 3.2 = 13.7");
    print_f32(sum);
    print("10.5 - 3.2 = 7.3");
    print_f32(diff);
    print("10.5 * 3.2 = 33.6");
    print_f32(prod);
    print("10.5 / 3.2 = 3.28125");
    print_f32(quot);
    print("");
    
    print("=== MIXED PRECISION ARITHMETIC ===");
    let precision_32: f32 = 1.0;
    let precision_64: f64 = 1.0;
    
    // These would require implicit promotion
    // let mixed_sum: f64 = precision_32 + precision_64;
    
    print("f32 precision: limited to ~7 decimal digits");
    print("f64 precision: limited to ~15 decimal digits");
    print("");
    
    print("=== ENHANCED FLOATING POINT SYSTEM: SUCCESS ===");
}
