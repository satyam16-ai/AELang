extern print_int(val: i32);
extern print_clean(msg: str);

func many_params(a: i32, b: i32, c: i32, d: i32, e: i32, f: i32, g: i32, h: i32): i32 {
    return a + b + c + d + e + f + g + h;
}

func nested_param_calls(x: i32): i32 {
    return many_params(x, x+1, x+2, x+3, x+4, x+5, x+6, x+7);
}

func recursive_with_many_params(n: i32, acc: i32, mult: i32): i32 {
    if n <= 0 {
        return acc;
    } else {
        return recursive_with_many_params(n - 1, acc + (n * mult), mult + 1);
    }
}

func stack_intensive_function(depth: i32): i32 {
    if depth <= 0 {
        return 0;
    } else {
        let local1: i32 = depth * 2;
        let local2: i32 = depth * 3;
        let local3: i32 = depth * 4;
        let local4: i32 = local1 + local2 + local3;
        return local4 + stack_intensive_function(depth - 1);
    }
}

func main(): void {
    print_clean("=== STACK AND PARAMETER EDGE CASES ===\n");
    
    print_clean("Many parameters (1,2,3,4,5,6,7,8): ");
    let result1: i32 = many_params(1, 2, 3, 4, 5, 6, 7, 8);
    print_int(result1);
    print_clean("\n");
    
    print_clean("Nested parameter calls (3): ");
    let result2: i32 = nested_param_calls(3);
    print_int(result2);
    print_clean("\n");
    
    print_clean("Recursive with multiple params (5): ");
    let result3: i32 = recursive_with_many_params(5, 0, 1);
    print_int(result3);
    print_clean("\n");
    
    print_clean("Stack intensive function (10): ");
    let result4: i32 = stack_intensive_function(10);
    print_int(result4);
    print_clean("\n");
    
    print_clean("Complex nested calls: ");
    let complex: i32 = many_params(
        nested_param_calls(1),
        recursive_with_many_params(3, 0, 1),
        stack_intensive_function(3),
        many_params(1, 1, 1, 1, 1, 1, 1, 1),
        nested_param_calls(0),
        recursive_with_many_params(2, 5, 2),
        stack_intensive_function(2),
        many_params(0, 1, 2, 3, 4, 5, 6, 7)
    );
    print_int(complex);
    print_clean("\n");
    
    print_clean("Edge case: All zero parameters: ");
    let zeros: i32 = many_params(0, 0, 0, 0, 0, 0, 0, 0);
    print_int(zeros);
    print_clean("\n");
    
    print_clean("Edge case: All negative parameters: ");
    let negatives: i32 = many_params(-1, -2, -3, -4, -5, -6, -7, -8);
    print_int(negatives);
    print_clean("\n");
}
