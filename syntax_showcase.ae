// ÆLang Syntax Highlighting Demo - All Features Showcase
// This file demonstrates all supported syntax highlighting features

extern print(format: str, ...);
extern read();

func main(): void {
    // ========== ALL DATA TYPES ==========
    
    // 8-bit integers
    let my_i8: i8 = -128;        // signed 8-bit
    let my_u8: u8 = 255;         // unsigned 8-bit
    
    // 16-bit integers  
    let my_i16: i16 = -32768;    // signed 16-bit
    let my_u16: u16 = 65535;     // unsigned 16-bit
    
    // 32-bit integers
    let my_i32: i32 = -2147483648;   // signed 32-bit
    let my_u32: u32 = 4294967295;    // unsigned 32-bit
    
    // 64-bit integers
    let my_i64: i64 = -9223372036854775808;  // signed 64-bit
    let my_u64: u64 = 18446744073709551615;  // unsigned 64-bit
    
    // Floating point types
    let my_f8: f8 = 3.14;       // 8-bit float
    let my_f16: f16 = 2.718;    // 16-bit float
    let my_f32: f32 = 1.414;    // 32-bit float
    let my_f64: f64 = 1.732;    // 64-bit float
    
    // Special types
    let my_num: num = 42.0;      // Dynamic number type
    let my_bool: bool = true;    // Boolean type
    let my_char: char = 'A';     // Character type
    let my_str: str = "Hello ÆLang!";  // String type
    
    // ========== NUMBER FORMATS ==========
    
    // Decimal numbers
    let decimal: i32 = 123456;
    
    // Hexadecimal numbers
    let hex: i32 = 0xFF00AA;
    let hex2: i32 = 0x123ABC;
    
    // Binary numbers
    let binary: i32 = 0b11010110;
    let binary2: i32 = 0B10101010;
    
    // Octal numbers
    let octal: i32 = 0o755;
    let octal2: i32 = 0O644;
    
    // Scientific notation
    let scientific: f64 = 1.23e-4;
    let scientific2: f32 = 5.67E+10f;
    
    // ========== BOOLEAN AND NULL CONSTANTS ==========
    let flag1: bool = true;
    let flag2: bool = false;
    let ptr: void = null;
    
    // ========== FORMAT SPECIFIERS IN STRINGS ==========
    print("Integer formats: %d %u %ld %lu\n", my_i32, my_u32, my_i64, my_u64);
    print("Float format: %f\n", my_f32);
    print("Boolean format: %t\n", my_bool);
    print("Character format: %c\n", my_char);
    
    // ========== ESCAPE SEQUENCES ==========
    print("Escape sequences: \\n \\t \\r \\\\ \\\" \\'\n");
    
    // ========== OPERATORS ==========
    
    // Arithmetic operators
    let result1: i32 = my_i32 + my_i16;
    let result2: i32 = my_i32 - my_i16;
    let result3: i32 = my_i32 * my_i16;
    let result4: i32 = my_i32 / my_i16;
    let result5: i32 = my_i32 % my_i16;
    
    // Comparison operators
    if (my_i32 == my_i16) {
        print("Equal\n");
    } else if (my_i32 != my_i16) {
        print("Not equal\n");
    }
    
    if (my_i32 > my_i16 && my_i32 >= my_i16) {
        print("Greater\n");
    }
    
    if (my_i32 < my_i16 || my_i32 <= my_i16) {
        print("Less\n");
    }
    
    // Logical operators
    let logical: bool = !my_bool && (flag1 || flag2);
    
    // Assignment operator
    my_i32 = 100;
    
    // ========== CONTROL FLOW ==========
    
    // If statements
    if (my_bool) {
        print("Boolean is true\n");
    } else {
        print("Boolean is false\n");
    }
    
    // While loop
    let counter: i32 = 0;
    while (counter < 5) {
        print("Counter: %d\n", counter);
        counter = counter + 1;
    }
    
    // For loop
    for (let i: i32 = 0; i < 10; i = i + 1) {
        if (i == 5) {
            continue;
        }
        if (i == 8) {
            break;
        }
        print("Loop iteration: %d\n", i);
    }
    
    // Function call
    let user_input: i32 = read();
    print("You entered: %d\n", user_input);
    
    // Return statement
    return;
}

// ========== CUSTOM FUNCTIONS ==========

func calculate_sum(a: i32, b: i32): i32 {
    let sum: i32 = a + b;
    return sum;
}

func print_array(arr: str, size: i32): void {
    print("Array processing function\n");
    // Function implementation
}

// ========== EXTERN DECLARATIONS ==========
extern malloc(size: u64): void;
extern free(ptr: void): void;
extern strlen(str: str): u64;

// End of ÆLang syntax showcase
