extern print(format: str, ...);
extern read();

func main(): void {
    print("=== ÆLang Data Types and I/O Test ===\n");
    
    print("\n--- Testing Signed Integer Types ---\n");
    print("Testing i8 (-128 to 127):\n");
    let min_i8: i8 = -128;
    let max_i8: i8 = 127;
    let zero_i8: i8 = 0;
    print("i8 min: %d, max: %d, zero: %d\n", min_i8, max_i8, zero_i8);
    
    print("Enter an i8 value (-128 to 127): ");
    let user_i8: i8 = read();
    print("You entered i8: %d\n", user_i8);
    
    print("\nTesting i16 (-32768 to 32767):\n");
    let min_i16: i16 = -32768;
    let max_i16: i16 = 32767;
    let zero_i16: i16 = 0;
    print("i16 min: %d, max: %d, zero: %d\n", min_i16, max_i16, zero_i16);
    
    print("Enter an i16 value (-32768 to 32767): ");
    let user_i16: i16 = read();
    print("You entered i16: %d\n", user_i16);
    
    print("\nTesting i32 (-2147483648 to 2147483647):\n");
    let min_i32: i32 = -2147483648;
    let max_i32: i32 = 2147483647;
    let zero_i32: i32 = 0;
    print("i32 min: %d, max: %d, zero: %d\n", min_i32, max_i32, zero_i32);
    
    print("Enter an i32 value: ");
    let user_i32: i32 = read();
    print("You entered i32: %d\n", user_i32);
    
    print("\nTesting i64 (very large range):\n");
    let large_i64: i64 = 9223372036854775807;
    let negative_i64: i64 = -9223372036854775808;
    let zero_i64: i64 = 0;
    print("i64 large: %ld, negative: %ld, zero: %ld\n", large_i64, negative_i64, zero_i64);
    
    print("Enter an i64 value: ");
    let user_i64: i64 = read();
    print("You entered i64: %ld\n", user_i64);
    
    print("\n--- Testing Unsigned Integer Types ---\n");
    
    print("Testing u8 (0 to 255):\n");
    let min_u8: u8 = 0;
    let max_u8: u8 = 255;
    let mid_u8: u8 = 128;
    print("u8 min: %u, max: %u, mid: %u\n", min_u8, max_u8, mid_u8);
    
    print("Enter a u8 value (0 to 255): ");
    let user_u8: u8 = read();
    print("You entered u8: %u\n", user_u8);
    
    print("\nTesting u16 (0 to 65535):\n");
    let min_u16: u16 = 0;
    let max_u16: u16 = 65535;
    let mid_u16: u16 = 32768;
    print("u16 min: %u, max: %u, mid: %u\n", min_u16, max_u16, mid_u16);
    
    print("Enter a u16 value (0 to 65535): ");
    let user_u16: u16 = read();
    print("You entered u16: %u\n", user_u16);
    
    print("\nTesting u32 (0 to 4294967295):\n");
    let min_u32: u32 = 0;
    let max_u32: u32 = 4294967295;
    let mid_u32: u32 = 2147483648;
    print("u32 min: %u, max: %u, mid: %u\n", min_u32, max_u32, mid_u32);
    
    print("Enter a u32 value: ");
    let user_u32: u32 = read();
    print("You entered u32: %u\n", user_u32);
    
    print("\nTesting u64 (very large unsigned range):\n");
    let large_u64: u64 = 18446744073709551615;
    let zero_u64: u64 = 0;
    print("u64 max: %lu, zero: %lu\n", large_u64, zero_u64);
    
    print("Enter a u64 value: ");
    let user_u64: u64 = read();
    print("You entered u64: %lu\n", user_u64);
    
    print("\n--- Testing Floating-Point Types ---\n");
    
    print("Testing f8 (8-bit custom float):\n");
    let small_f8: f8 = 1.5;
    let negative_f8: f8 = -2.25;
    let zero_f8: f8 = 0.0;
    print("f8 small: %f, negative: %f, zero: %f\n", small_f8, negative_f8, zero_f8);
    
    print("Enter an f8 value: ");
    let user_f8: f8 = read();
    print("You entered f8: %f\n", user_f8);
    
    print("\nTesting f16 (16-bit half precision):\n");
    let pi_f16: f16 = 3.14159;
    let negative_f16: f16 = -1.414;
    let zero_f16: f16 = 0.0;
    print("f16 pi: %.5f, negative: %.3f, zero: %.1f\n", pi_f16, negative_f16, zero_f16);
    
    print("Enter an f16 value: ");
    let user_f16: f16 = read();
    print("You entered f16: %.3f\n", user_f16);
    
    print("\nTesting f32 (32-bit single precision):\n");
    let precise_f32: f32 = 123.456789;
    let scientific_f32: f32 = 0.000123;
    let large_f32: f32 = 1234567.89;
    print("f32 precise: %.6f, scientific: %e, large: %.2f\n", precise_f32, scientific_f32, large_f32);
    
    print("Enter a f32 value: ");
    let user_f32: f32 = read();
    print("You entered f32: %.3f\n", user_f32);
    
    print("\nTesting f64 (64-bit double precision):\n");
    let very_precise_f64: f64 = 3.141592653589793238;
    let tiny_f64: f64 = 0.00000000012345;
    let huge_f64: f64 = 987654321000000.0;
    print("f64 pi: %.15f, tiny: %e, huge: %e\n", very_precise_f64, tiny_f64, huge_f64);
    
    print("Enter a f64 value: ");
    let user_f64: f64 = read();
    print("You entered f64: %.6f\n", user_f64);
    
    print("\n--- Testing Special Types ---\n");
    
    print("Testing num (dynamic numeric type):\n");
    let int_num: num = 42;
    let float_num: num = 3.14159;
    let zero_num: num = 0;
    print("num as int: %d, as float: %.5f, zero: %d\n", int_num, float_num, zero_num);
    
    print("Enter a num value (integer): ");
    let user_num_int: num = read();
    print("You entered num (int): %d\n", user_num_int);
    
    print("Enter a num value (float): ");
    let user_num_float: num = read();
    print("You entered num (float): %.3f\n", user_num_float);
    
    print("\nTesting bool (boolean type):\n");
    let true_bool: bool = true;
    let false_bool: bool = false;
    let TRUE_bool: bool = TRUE;
    let FALSE_bool: bool = FALSE;
    print("true: %t, false: %t, TRUE: %t, FALSE: %t\n", true_bool, false_bool, TRUE_bool, FALSE_bool);
    
    print("Enter a boolean value (true/false): ");
    let user_bool: bool = read();
    print("You entered bool: %t\n", user_bool);
    
    print("\nTesting char (character type):\n");
    let letter_char: char = 'A';
    let digit_char: char = '9';
    let symbol_char: char = '@';
    let space_char: char = ' ';
    let newline_char: char = '\n';
    let tab_char: char = '\t';
    let null_char: char = '\0';
    print("letter: %c, digit: %c, symbol: %c, space: '%c'\n", letter_char, digit_char, symbol_char, space_char);
    print("special chars: newline='%c', tab='%c', null='%c'\n", newline_char, tab_char, null_char);
    
    print("Enter a character: ");
    let user_char: char = read();
    print("You entered char: %c\n", user_char);
    
    print("\nTesting str (string type):\n");
    let simple_str: str = "Hello, ÆLang!";
    let empty_str: str = "";
    let quoted_str: str = "She said \"Hello\"";
    let path_str: str = "C:\\Users\\Name\\file.txt";
    let multiline_str: str = "Line 1\nLine 2\nLine 3";
    print("simple: %s\n", simple_str);
    print("empty: '%s'\n", empty_str);
    print("quoted: %s\n", quoted_str);
    print("path: %s\n", path_str);
    print("multiline: %s\n", multiline_str);
    
    print("\n--- Testing Edge Cases and Boundary Values ---\n");
    
    print("Zero values across all types:\n");
    let zero_test_i8: i8 = 0;
    let zero_test_i16: i16 = 0;
    let zero_test_i32: i32 = 0;
    let zero_test_i64: i64 = 0;
    let zero_test_u8: u8 = 0;
    let zero_test_u16: u16 = 0;
    let zero_test_u32: u32 = 0;
    let zero_test_u64: u64 = 0;
    let zero_test_f8: f8 = 0.0;
    let zero_test_f16: f16 = 0.0;
    let zero_test_f32: f32 = 0.0;
    let zero_test_f64: f64 = 0.0;
    let zero_test_num: num = 0;
    let zero_test_bool: bool = false;
    let zero_test_char: char = '\0';
    print("zeros: i8=%d i16=%d i32=%d i64=%ld u8=%u u16=%u u32=%u u64=%lu\n", 
          zero_test_i8, zero_test_i16, zero_test_i32, zero_test_i64, 
          zero_test_u8, zero_test_u16, zero_test_u32, zero_test_u64);
    print("float zeros: f8=%f f16=%f f32=%f f64=%f num=%d\n", 
          zero_test_f8, zero_test_f16, zero_test_f32, zero_test_f64, zero_test_num);
    print("other zeros: bool=%t char='%c'\n", zero_test_bool, zero_test_char);
    
    print("\nNegative values testing:\n");
    let neg_i8: i8 = -100;
    let neg_i16: i16 = -30000;
    let neg_i32: i32 = -999999;
    let neg_i64: i64 = -1234567890123456;
    let neg_f8: f8 = -1.5;
    let neg_f16: f16 = -123.45;
    let neg_f32: f32 = -123.456;
    let neg_f64: f64 = -0.0000987654321;
    let neg_num: num = -42;
    print("negative integers: i8=%d i16=%d i32=%d i64=%ld\n", neg_i8, neg_i16, neg_i32, neg_i64);
    print("negative floats: f8=%f f16=%f f32=%.3f f64=%e num=%d\n", 
          neg_f8, neg_f16, neg_f32, neg_f64, neg_num);
    
    print("\nMaximum values testing:\n");
    let max_i8_test: i8 = 127;
    let max_i16_test: i16 = 32767;
    let max_i32_test: i32 = 2147483647;
    let max_u8_test: u8 = 255;
    let max_u16_test: u16 = 65535;
    let max_u32_test: u32 = 4294967295;
    print("max signed: i8=%d i16=%d i32=%d\n", max_i8_test, max_i16_test, max_i32_test);
    print("max unsigned: u8=%u u16=%u u32=%u\n", max_u8_test, max_u16_test, max_u32_test);
    
    print("\nMinimum values testing:\n");
    let min_i8_test: i8 = -128;
    let min_i16_test: i16 = -32768;
    let min_i32_test: i32 = -2147483648;
    print("min signed: i8=%d i16=%d i32=%d\n", min_i8_test, min_i16_test, min_i32_test);
    
    print("\nLarge values testing:\n");
    let large_u32_test: u32 = 4000000000;
    let large_u64_test: u64 = 18000000000000000000;
    let large_i64_test: i64 = 9000000000000000000;
    let large_f32_test: f32 = 123456789.123456;
    let large_f64_test: f64 = 123456789000000000000.0;
    print("large values: u32=%u u64=%lu i64=%ld\n", large_u32_test, large_u64_test, large_i64_test);
    print("large floats: f32=%.6f f64=%e\n", large_f32_test, large_f64_test);
    
    print("\nSmall precision testing:\n");
    let tiny_f32: f32 = 0.0000123456;
    let tiny_f64: f64 = 0.000000000123456789;
    let tiny_f8: f8 = 0.125;
    let tiny_f16: f16 = 0.00123;
    print("tiny floats: f8=%f f16=%f f32=%e f64=%e\n", tiny_f8, tiny_f16, tiny_f32, tiny_f64);
    
    print("\nBoolean edge cases:\n");
    let bool_true_lower: bool = true;
    let bool_false_lower: bool = false;
    let bool_true_upper: bool = TRUE;
    let bool_false_upper: bool = FALSE;
    let bool_true_mixed: bool = True;
    let bool_false_mixed: bool = False;
    print("bool variants: true=%t false=%t TRUE=%t FALSE=%t True=%t False=%t\n", 
          bool_true_lower, bool_false_lower, bool_true_upper, bool_false_upper, 
          bool_true_mixed, bool_false_mixed);
    
    print("\nString edge cases:\n");
    let empty_string: str = "";
    let single_char_str: str = "X";
    let escape_str: str = "Tab:\t Newline:\n Quote:\" Backslash:\\";
    let unicode_str: str = "ÆLang Programming Language";
    print("empty: '%s'\n", empty_string);
    print("single: '%s'\n", single_char_str);
    print("escapes: %s\n", escape_str);
    print("unicode: %s\n", unicode_str);
    
    print("\nCharacter edge cases:\n");
    let char_min: char = ' ';
    let char_max: char = '~';
    let char_digit: char = '0';
    let char_letter_lower: char = 'a';
    let char_letter_upper: char = 'Z';
    let char_special: char = '!';
    print("char range: min='%c' max='%c' digit='%c' lower='%c' upper='%c' special='%c'\n", 
          char_min, char_max, char_digit, char_letter_lower, char_letter_upper, char_special);
    
    print("\nNumeric type dynamic behavior:\n");
    let num_as_int: num = 999;
    let num_as_float: num = 999.999;
    let num_zero: num = 0;
    let num_negative: num = -555;
    print("num variations: int=%d float=%.3f zero=%d negative=%d\n", 
          num_as_int, num_as_float, num_zero, num_negative);
    
    print("\n--- Interactive Input Testing ---\n");
    print("Testing unified read() function with different target types:\n");
    
    print("Enter any integer for i32: ");
    let read_test_i32: i32 = read();
    print("Read as i32: %d\n", read_test_i32);
    
    print("Enter any float for f32: ");
    let read_test_f32: f32 = read();
    print("Read as f32: %.3f\n", read_test_f32);
    
    print("Enter true/false for bool: ");
    let read_test_bool: bool = read();
    print("Read as bool: %t\n", read_test_bool);
    
    print("Enter single character for char: ");
    let read_test_char: char = read();
    print("Read as char: %c\n", read_test_char);
    
    print("Enter number for num type: ");
    let read_test_num: num = read();
    print("Read as num: %d\n", read_test_num);
    
    print("\n=== Data Types and I/O Test Complete ===\n");
    print("All 15 data types tested successfully!\n");
    print("Edge cases and boundary values verified!\n");
    print("Unified read() function validated!\n");
}
