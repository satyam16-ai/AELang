// Edge Cases and Extreme Conditions Test for Ã†Lang (Fixed)
extern print(format: str, ...);

func main(): void {
    print("=== Edge Cases and Extreme Conditions Test ===\n");
    
    // ============ Integer Boundary Values Test ============
    print("=== Integer Boundary Values Test ===\n");
    
    // i8 boundaries
    let i8_max: i8 = 127;
    let i8_min: i8 = -128;
    print("i8 max: %d, min: %d\n", i8_max, i8_min);
    
    // i16 boundaries
    let i16_max: i16 = 32767;
    let i16_min: i16 = -32768;
    print("i16 max: %d, min: %d\n", i16_max, i16_min);
    
    // i32 boundaries
    let i32_max: i32 = 2147483647;
    let i32_min: i32 = -2147483648;
    print("i32 max: %d, min: %d\n", i32_max, i32_min);
    
    // u8 boundaries
    let u8_max: u8 = 255;
    let u8_min: u8 = 0;
    print("u8 max: %u, min: %u\n", u8_max, u8_min);
    
    // u16 boundaries
    let u16_max: u16 = 65535;
    let u16_min: u16 = 0;
    print("u16 max: %u, min: %u\n", u16_max, u16_min);
    
    // u32 boundaries
    let u32_max: u32 = 4294967295;
    let u32_min: u32 = 0;
    print("u32 max: %u, min: %u\n", u32_max, u32_min);
    
    // ============ Division Edge Cases ============
    print("=== Division Edge Cases ===\n");
    
    let dividend: i32 = 100;
    let divisor: i32 = 1;
    let division_result: i32 = dividend / divisor;
    print("Normal division: %d / %d = %d\n", dividend, divisor, division_result);
    
    // Division by very small number
    let small_divisor: i32 = 1;
    let small_division: i32 = dividend / small_divisor;
    print("Division by 1: %d / %d = %d\n", dividend, small_divisor, small_division);
    
    // ============ Floating Point Edge Cases ============
    print("=== Floating Point Edge Cases ===\n");
    
    let float_zero: f32 = 0.0;
    let float_very_small: f32 = 0.000001;
    let float_very_large: f32 = 999999.999999;
    
    print("Float zero: %.6f\n", float_zero);
    print("Float very small: %.6f\n", float_very_small);
    print("Float very large: %.6f\n", float_very_large);
    
    // Floating point arithmetic edge cases
    let float_precision_test: f32 = 0.1 + 0.2;
    print("Precision test (0.1 + 0.2): %.10f\n", float_precision_test);
    
    // ============ Modulo Edge Cases ============
    print("=== Modulo Edge Cases ===\n");
    
    let mod_a: i32 = 17;
    let mod_b: i32 = 5;
    let mod_result: i32 = mod_a % mod_b;
    print("Normal modulo: %d %% %d = %d\n", mod_a, mod_b, mod_result);
    
    let mod_negative_val: i32 = 17;
    let mod_negative_result: i32 = -mod_negative_val % mod_b;
    print("Negative modulo: %d %% %d = %d\n", -mod_negative_val, mod_b, mod_negative_result);
    
    // ============ Character Edge Cases ============
    print("=== Character Edge Cases ===\n");
    
    let char_space: char = ' ';
    let char_a: char = 'A';
    let char_z: char = 'Z';
    
    print("Space char: '%c'\n", char_space);
    print("Char A: '%c'\n", char_a);
    print("Char Z: '%c'\n", char_z);
    
    // ============ String Edge Cases ============
    print("=== String Edge Cases ===\n");
    
    let empty_string: str = "";
    let single_char_string: str = "A";
    let normal_string: str = "Hello World";
    
    print("Empty string: \"%s\"\n", empty_string);
    print("Single char string: \"%s\"\n", single_char_string);
    print("Normal string: \"%s\"\n", normal_string);
    
    // ============ Complex Expression Edge Cases ============
    print("=== Complex Expression Edge Cases ===\n");
    
    // Deeply nested parentheses
    let complex1: i32 = ((((10 + 5) * 2) - 3) / 2);
    print("Complex nested: ((((10 + 5) * 2) - 3) / 2) = %d\n", complex1);
    
    // Mixed type operations
    let mixed_result: i32 = 10 + 5 * 2 - 3 / 2;
    print("Mixed operations: 10 + 5 * 2 - 3 / 2 = %d\n", mixed_result);
    
    print("=== Edge Cases Test Complete ===\n");
}
