extern print(format: str, ...);

// Test all integer types with functions
func test_i8(a: i8, b: i8): i8 {
    return a + b;
}

func test_i16(a: i16, b: i16): i16 {
    return a * b;
}

func test_i32(a: i32, b: i32): i32 {
    return a - b;
}

func test_i64(a: i64, b: i64): i64 {
    return a / b;
}

func test_u8(a: u8, b: u8): u8 {
    return a + b;
}

func test_u16(a: u16, b: u16): u16 {
    return a * b;
}

func test_u32(a: u32, b: u32): u32 {
    return a - b;
}

func test_u64(a: u64, b: u64): u64 {
    return a / b;
}

// Test floating point types
func test_f32(a: f32, b: f32): f32 {
    return a + b;
}

func test_f64(a: f64, b: f64): f64 {
    return a * b;
}

// Test void return type
func test_void_func(x: i32): void {
    print("Inside void function with x = %d\n", x);
}

// Test no parameters
func test_no_params(): i32 {
    return 42;
}

// Test multiple parameters (stress test)
func test_many_params(a: i32, b: i32, c: i32, d: i32, e: i32, f: i32, g: i32, h: i32): i32 {
    return a + b + c + d + e + f + g + h;
}

// Test recursive function (edge case)
func factorial(n: i32): i32 {
    if (n <= 1) {
        return 1;
    }
    return n * factorial(n - 1);
}

// Test complex calculations
func complex_calculation(a: i32, b: i32, c: i32): i32 {
    let temp1: i32 = a * b;
    let temp2: i32 = c + temp1;
    let temp3: i32 = temp2 / 2;
    return temp3;
}

// Test constants and globals with functions
const PI: f32 = 3.14159;
let global_counter: i32 = 0;

func increment_counter(): i32 {
    global_counter = global_counter + 1;
    return global_counter;
}

func get_pi(): f32 {
    return PI;
}

func main(): void {
    print("=== Comprehensive Function Test ===\n");
    
    // Test all integer types
    print("i8 test: %d + %d = %d\n", 10, 20, test_i8(10, 20));
    print("i16 test: %d * %d = %d\n", 100, 200, test_i16(100, 200));
    print("i32 test: %d - %d = %d\n", 1000, 300, test_i32(1000, 300));
    print("i64 test: %ld / %ld = %ld\n", 10000, 25, test_i64(10000, 25));
    
    print("u8 test: %u + %u = %u\n", 100, 150, test_u8(100, 150));
    print("u16 test: %u * %u = %u\n", 300, 400, test_u16(300, 400));
    print("u32 test: %u - %u = %u\n", 2000, 500, test_u32(2000, 500));
    print("u64 test: %lu / %lu = %lu\n", 50000, 100, test_u64(50000, 100));
    
    // Test floating point
    print("f32 test: %.2f + %.2f = %.2f\n", 3.14, 2.86, test_f32(3.14, 2.86));
    print("f64 test: %.6f * %.6f = %.6f\n", 1.234567, 2.345678, test_f64(1.234567, 2.345678));
    
    // Test void function
    test_void_func(999);
    
    // Test no parameters
    print("No params test: %d\n", test_no_params());
    
    // Test many parameters (edge case)
    print("Many params: %d\n", test_many_params(1, 2, 3, 4, 5, 6, 7, 8));
    
    // Test recursion
    print("Factorial of 5: %d\n", factorial(5));
    print("Factorial of 7: %d\n", factorial(7));
    
    // Test complex calculation
    print("Complex calc (10, 20, 30): %d\n", complex_calculation(10, 20, 30));
    
    // Test global variables and constants with functions
    print("Counter: %d\n", increment_counter());
    print("Counter: %d\n", increment_counter());
    print("Counter: %d\n", increment_counter());
    print("PI: %.5f\n", get_pi());
    
    print("=== All Function Tests Completed ===\n");
}
