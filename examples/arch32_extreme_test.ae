// ÆLang 32-bit Architecture Extreme Edge Case Test
// This test focuses on 32-bit limitations and edge cases

// Test 32-bit integer boundary values
let max_i32: i32 = 2147483647;          // Maximum i32 value
let min_i32: i32 = -2147483648;         // Minimum i32 value (will wrap in 32-bit)
let max_u32: u32 = 4294967295;          // Maximum u32 value

// Test smaller types at their limits
let max_i8: i8 = 127;
let min_i8: i8 = -128;
let max_u8: u8 = 255;
let zero_u8: u8 = 0;

let max_i16: i16 = 32767;
let min_i16: i16 = -32768;
let max_u16: u16 = 65535;
let zero_u16: u16 = 0;

// Test 32-bit floating point precision limits
let f32_max: f32 = 340282350000000000000000000000000000000.0;        // Near f32 maximum
let f32_min: f32 = -340282350000000000000000000000000000000.0;       // Near f32 minimum
let f32_tiny: f32 = 0.000000000000000000000000000000000000011755;   // Near f32 minimum positive
let f32_epsilon: f32 = 0.0000001192093;                              // f32 machine epsilon

// Test character edge cases
let null_char: char = '\0';              // Null character
let tab_char: char = '\t';               // Tab character
let newline_char: char = '\n';           // Newline character
let space_char: char = ' ';              // Space character
let tilde_char: char = '~';              // High ASCII character

// Test string edge cases
let empty_str: str = "";                 // Empty string
let single_char_str: str = "A";          // Single character string
let special_chars_str: str = "!@#$%^&*()"; // Special characters
let numbers_str: str = "1234567890";     // Numeric string

// Test boolean edge cases
let true_val: bool = true;
let false_val: bool = false;

// Print header for 32-bit test
print_str("=== ÆLang 32-bit Architecture Extreme Edge Case Test ===");
print_char('\n');

// Test 32-bit integer extremes
print_str("32-bit Integer Extremes:");
print_char('\n');
print_str("Max i32: ");
print_i32(max_i32);
print_char('\n');
print_str("Min i32: ");
print_i32(min_i32);
print_char('\n');
print_str("Max u32: ");
print_u32(max_u32);
print_char('\n');

// Test 8-bit extremes
print_str("\n8-bit Integer Extremes:");
print_char('\n');
print_str("Max i8: ");
print_i8(max_i8);
print_char('\n');
print_str("Min i8: ");
print_i8(min_i8);
print_char('\n');
print_str("Max u8: ");
print_u8(max_u8);
print_char('\n');
print_str("Zero u8: ");
print_u8(zero_u8);
print_char('\n');

// Test 16-bit extremes
print_str("\n16-bit Integer Extremes:");
print_char('\n');
print_str("Max i16: ");
print_i16(max_i16);
print_char('\n');
print_str("Min i16: ");
print_i16(min_i16);
print_char('\n');
print_str("Max u16: ");
print_u16(max_u16);
print_char('\n');
print_str("Zero u16: ");
print_u16(zero_u16);
print_char('\n');

// Test 32-bit float extremes
print_str("\n32-bit Float Extremes:");
print_char('\n');
print_str("f32 max: ");
print_f32(f32_max);
print_char('\n');
print_str("f32 min: ");
print_f32(f32_min);
print_char('\n');
print_str("f32 tiny: ");
print_f32(f32_tiny);
print_char('\n');
print_str("f32 epsilon: ");
print_f32(f32_epsilon);
print_char('\n');

// Test character extremes
print_str("\nCharacter Extremes:");
print_char('\n');
print_str("Null char: [");
print_char(null_char);
print_str("]");
print_char('\n');
print_str("Tab char: [");
print_char(tab_char);
print_str("]");
print_char('\n');
print_str("Newline char: [");
print_char(newline_char);
print_str("]");
print_char('\n');
print_str("Space char: [");
print_char(space_char);
print_str("]");
print_char('\n');
print_str("Tilde char: [");
print_char(tilde_char);
print_str("]");
print_char('\n');

// Test string extremes
print_str("\nString Extremes:");
print_char('\n');
print_str("Empty string: [");
print_str(empty_str);
print_str("]");
print_char('\n');
print_str("Single char: [");
print_str(single_char_str);
print_str("]");
print_char('\n');
print_str("Special chars: [");
print_str(special_chars_str);
print_str("]");
print_char('\n');
print_str("Numbers: [");
print_str(numbers_str);
print_str("]");
print_char('\n');

// Test boolean extremes
print_str("\nBoolean Values:");
print_char('\n');
print_str("True: ");
print_bool(true_val);
print_char('\n');
print_str("False: ");
print_bool(false_val);
print_char('\n');

// Test arithmetic edge cases
print_str("\n32-bit Arithmetic Edge Cases:");
print_char('\n');

// Addition overflow test (will wrap in 32-bit)
let overflow_test: i32 = 2147483647;
print_str("Near overflow i32: ");
print_i32(overflow_test);
print_char('\n');

// Unsigned arithmetic edge case
let u32_near_max: u32 = 4294967294;
print_str("Near max u32: ");
print_u32(u32_near_max);
print_char('\n');

// Small type promotion tests
let small_add: i16 = 32766;
print_str("i16 near max: ");
print_i16(small_add);
print_char('\n');

print_str("\n=== 32-bit Architecture Test Complete ===");
print_char('\n');
