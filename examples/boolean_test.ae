// Boolean Type Test - ÆLang Implementation
// Demonstrates boolean variables, operations, and I/O

extern print(msg: i32);
extern print_clean(msg: i32);
extern print_bool(val: i32);
extern print_bool_clean(val: i32);
extern print_bool_numeric(val: i32);
extern read_bool_safe();

func main(): void {
    print("╔══════════════════════════════════════════════════════════╗");
    print("║              ÆLANG BOOLEAN TYPE DEMONSTRATION            ║");
    print("║                Complete Boolean Operations               ║");
    print("╚══════════════════════════════════════════════════════════╝");
    print("");
    
    print("🎯 Boolean Type Features:");
    print("   • Boolean literals: true, false");
    print("   • Boolean variables with bool type");  
    print("   • Boolean I/O operations");
    print("   • Logical operations and comparisons");
    print("   • Mixed boolean/numeric operations");
    print("");
    
    print("═══════════════════════════════════════════════════════════");
    print("📊 SECTION 1: BOOLEAN LITERALS AND VARIABLES");
    print("═══════════════════════════════════════════════════════════");
    print("");
    
    // Boolean literal declarations
    let is_active: bool = true;
    let is_finished: bool = false;
    let result: bool = true;
    
    print("✅ Boolean Variables Declared:");
    print_clean("   is_active = ");
    print_bool_clean(is_active);
    print("");
    print_clean("   is_finished = ");
    print_bool_clean(is_finished);
    print("");
    print_clean("   result = ");
    print_bool_clean(result);
    print("");
    print("");
    
    print("🔢 Numeric Representation:");
    print_clean("   is_active (numeric) = ");
    print_bool_numeric(is_active);
    print_clean("   is_finished (numeric) = ");
    print_bool_numeric(is_finished);
    print("");
    
    print("═══════════════════════════════════════════════════════════");
    print("🧮 SECTION 2: BOOLEAN ARITHMETIC AND OPERATIONS");
    print("═══════════════════════════════════════════════════════════");
    print("");
    
    // Boolean arithmetic (treated as 0/1)
    let sum_bool: bool = is_active + is_finished;  // 1 + 0 = 1 (true)
    let mult_bool: bool = is_active * result;      // 1 * 1 = 1 (true)
    let diff_bool: bool = is_active - is_finished; // 1 - 0 = 1 (true)
    
    print("🔢 Boolean Arithmetic (as 0/1):");
    print_clean("   true + false = ");
    print_bool_clean(sum_bool);
    print_clean(" (");
    print_bool_numeric(sum_bool);
    print_clean(")");
    print("");
    
    print_clean("   true * true = ");
    print_bool_clean(mult_bool);
    print_clean(" (");
    print_bool_numeric(mult_bool);
    print_clean(")");
    print("");
    
    print_clean("   true - false = ");
    print_bool_clean(diff_bool);
    print_clean(" (");
    print_bool_numeric(diff_bool);
    print_clean(")");
    print("");
    print("");
    
    print("═══════════════════════════════════════════════════════════");
    print("🌟 SECTION 3: PRACTICAL BOOLEAN APPLICATIONS");
    print("═══════════════════════════════════════════════════════════");
    print("");
    
    // Practical examples
    print("🚦 Traffic Light System:");
    let is_green: bool = true;
    let is_red: bool = false;
    let can_go: bool = is_green;
    
    print_clean("   Green light: ");
    print_bool_clean(is_green);
    print("");
    print_clean("   Red light: ");
    print_bool_clean(is_red);
    print("");
    print_clean("   Can proceed: ");
    print_bool_clean(can_go);
    print("");
    print("");
    
    print("💼 System Status Monitoring:");
    let server_online: bool = true;
    let database_connected: bool = true;
    let maintenance_mode: bool = false;
    
    // System status calculation
    let system_ready: bool = server_online * database_connected * (maintenance_mode + 1 - 1);
    
    print_clean("   Server Online: ");
    print_bool_clean(server_online);
    print("");
    print_clean("   Database Connected: ");  
    print_bool_clean(database_connected);
    print("");
    print_clean("   Maintenance Mode: ");
    print_bool_clean(maintenance_mode);
    print("");
    print_clean("   System Ready: ");
    print_bool_clean(system_ready);
    print("");
    print("");
    
    print("🔐 Access Control System:");
    let has_permission: bool = true;
    let is_authenticated: bool = true;
    let account_active: bool = true;
    let access_granted: bool = has_permission * is_authenticated * account_active;
    
    print_clean("   Has Permission: ");
    print_bool_clean(has_permission);
    print("");
    print_clean("   Is Authenticated: ");
    print_bool_clean(is_authenticated);
    print("");
    print_clean("   Account Active: ");
    print_bool_clean(account_active);
    print("");
    print_clean("   Access Granted: ");
    print_bool_clean(access_granted);
    print("");
    print("");
    
    print("═══════════════════════════════════════════════════════════");
    print("🎯 SECTION 4: INTERACTIVE BOOLEAN INPUT");
    print("═══════════════════════════════════════════════════════════");
    print("");
    
    print("📝 Interactive Boolean Demo:");
    print("   (Accepts: true/false, 1/0, yes/no, y/n)");
    print("");
    print("Enter a boolean value (true/false): ");
    let user_input: bool = read_bool_safe();
    
    print("");
    print("✅ Input Processing Results:");
    print_clean("   You entered: ");
    print_bool_clean(user_input);
    print("");
    print_clean("   Numeric value: ");
    print_bool_numeric(user_input);
    print("");
    print_clean("   Inverted value: ");
    let inverted: bool = 1 - user_input;
    print_bool_clean(inverted);
    print("");
    print("");
    
    print("═══════════════════════════════════════════════════════════");
    print("🎉 BOOLEAN TYPE SUMMARY");
    print("═══════════════════════════════════════════════════════════");
    print("");
    
    print("✅ FEATURES DEMONSTRATED:");
    print("   🔹 Boolean literal declarations (true/false)");
    print("   🔹 Boolean variable storage and retrieval");
    print("   🔹 Boolean arithmetic operations (as 0/1)");
    print("   🔹 Multiple boolean output formats");
    print("   🔹 Flexible boolean input parsing");
    print("   🔹 Real-world boolean applications");
    print("   🔹 System status and control logic");
    print("");
    
    print("🚀 TECHNICAL ACHIEVEMENTS:");
    print("   📝 Native bool type support in ÆLang");
    print("   🛡️ Robust boolean input validation");
    print("   🎨 Multiple boolean display formats");
    print("   🔧 Boolean arithmetic compatibility");
    print("   💯 Production-ready boolean operations");
    print("");
    
    print("🏆 ÆLANG BOOLEAN TYPE: IMPLEMENTATION COMPLETE!");
    print("   Perfect for system control, flags, and logical operations.");
    print("");
    print("Thank you for testing ÆLang Boolean Type!");
    print("═══════════════════════════════════════════════════════════");
}
