extern print(format: str, ...);

// Global variables with different data types
global app_version: i32 = 42;
global app_name: str = "Ã†Lang";
global debug_mode: bool = true;
global pi_value: f64 = 3.14159;

func main(): void {
    print("ðŸŽ¯ Comprehensive Scope & Type System Test ðŸŽ¯\n");
    
    // Test 1: Global variable access
    print("=== Global Variables ===\n");
    print("App Version: %d\n", app_version);
    print("App Name: %s\n", app_name);
    print("Debug Mode: %d\n", debug_mode);
    print("Pi Value: %f\n", pi_value);
    
    // Test 2: Local variables with shadowing
    print("\n=== Local Shadowing ===\n");
    let app_version: i32 = 999;  // Shadow global
    print("Local app_version: %d\n", app_version);
    print("Global app_version: %d\n", ::app_version);
    
    // Test 3: Type-safe operations (only widening conversions)
    print("\n=== Type-Safe Operations ===\n");
    let medium_int: i16 = 1000;     // i16 value
    let large_int: i32 = medium_int; // Widening (allowed)
    print("Widening conversion: i16 %d -> i32 %d\n", medium_int, large_int);
    
    // Test 4: Proper data type declarations
    print("\n=== Data Type Support ===\n");
    let short_val: i16 = -1000;     // Proper i16 value
    let int_val: i32 = 1000000;     // Proper i32 value
    let long_val: i64 = 9223372036854775000; // Proper i64 value
    let float_val: f32 = 2.718;     // Proper f32 value
    let double_val: f64 = 3.141592653589793; // Proper f64 value
    let char_val: char = 'A';       // Character
    let str_val: str = "Type system works!"; // String
    
    print("i16: %d\n", short_val);
    print("i32: %d\n", int_val);
    print("i64: %ld\n", long_val);
    print("f32: %f\n", float_val);
    print("f64: %f\n", double_val);
    print("char: %c\n", char_val);
    print("str: %s\n", str_val);
    
    // Test 5: Const declarations
    const MAX_USERS: i32 = 1000;
    print("\nConst value: %d\n", MAX_USERS);
    
    // Test 6: Global scope access with ::
    print("\n=== Global Scope Access ===\n");
    let debug_mode: bool = false;  // Shadow global
    print("Local debug_mode: %d\n", debug_mode);
    print("Global debug_mode: %d\n", ::debug_mode);
    
    print("\nðŸŽ‰ All tests passed! Type system working correctly! ðŸŽ‰\n");
    print("âœ… Features tested:\n");
    print("  â€¢ Global variables with all data types\n");
    print("  â€¢ Local variable shadowing\n");
    print("  â€¢ Global access operator (::)\n");
    print("  â€¢ Type-safe widening conversions\n");
    print("  â€¢ Strict type error detection\n");
    print("  â€¢ Const declarations\n");
}
