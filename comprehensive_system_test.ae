extern print(format: str, ...);
extern read();

func main(): void {
    print("=== Ã†Lang Comprehensive System Test ===\n\n");
    
    // ============= I/O and Data Type Storage Test =============
    print("1. TESTING I/O AND DATA TYPE STORAGE (ALL TYPES - 64-bit mode):\n");
    print("Please enter the following values in order:\n");
    print("i8 (byte): 100\n");
    print("i16 (short): 25000\n"); 
    print("i32 (int): 1000000\n");
    print("i64 (long): 9223372036854775807\n");
    print("u8 (unsigned byte): 200\n");
    print("u16 (unsigned short): 50000\n");
    print("u32 (unsigned int): 3000000\n");
    print("u64 (unsigned long): 18446744073709551615\n");
    print("f32 (float): 3.14159\n");
    print("f64 (double): 2.718281828459045\n");
    print("num (number): 42.195\n");
    print("char: Z\n\n");
    
    // Read and store all data types
    print("Enter i8 value: ");
    let val_i8: i8 = read();
    print("Stored i8: %d\n", val_i8);
    
    print("Enter i16 value: ");
    let val_i16: i16 = read();
    print("Stored i16: %d\n", val_i16);
    
    print("Enter i32 value: ");
    let val_i32: i32 = read();
    print("Stored i32: %d\n", val_i32);
    
    print("Enter i64 value: ");
    let val_i64: i64 = read();
    print("Stored i64: %ld\n", val_i64);
    
    print("Enter u8 value: ");
    let val_u8: u8 = read();
    print("Stored u8: %u\n", val_u8);
    
    print("Enter u16 value: ");
    let val_u16: u16 = read();
    print("Stored u16: %u\n", val_u16);
    
    print("Enter u32 value: ");
    let val_u32: u32 = read();
    print("Stored u32: %u\n", val_u32);
    
    print("Enter u64 value: ");
    let val_u64: u64 = read();
    print("Stored u64: %lu\n", val_u64);
    
    print("Enter f32 value: ");
    let val_f32: f32 = read();
    print("Stored f32: %f\n", val_f32);
    
    print("Enter f64 value: ");
    let val_f64: f64 = read();
    print("Stored f64: %lf\n", val_f64);
    
    print("Enter num value: ");
    let val_num: num = read();
    print("Stored num: %f\n", val_num);
    
    print("Enter char value: ");
    let val_char: char = read();
    print("Stored char: %c\n\n", val_char);
    
    // ============= ARITHMETIC OPERATORS TEST =============
    print("2. TESTING ARITHMETIC OPERATORS WITH PRECEDENCE:\n");
    
    let a: i32 = 10;
    let b: i32 = 5;
    let c: i32 = 3;
    let d: i32 = 2;
    
    print("Variables: a=%d, b=%d, c=%d, d=%d\n", a, b, c, d);
    
    // Basic arithmetic
    let add_result: i32 = a + b;
    print("Addition: %d + %d = %d\n", a, b, add_result);
    
    let sub_result: i32 = a - b;
    print("Subtraction: %d - %d = %d\n", a, b, sub_result);
    
    let mul_result: i32 = a * b;
    print("Multiplication: %d * %d = %d\n", a, b, mul_result);
    
    let div_result: i32 = a / b;
    print("Division: %d / %d = %d\n", a, b, div_result);
    
    let mod_result: i32 = a % c;
    print("Modulo: %d %% %d = %d\n", a, c, mod_result);
    
    // Operator precedence test: a + b * c - d / 2
    // Should be: 10 + (5 * 3) - (2 / 2) = 10 + 15 - 1 = 24
    let precedence_result: i32 = a + b * c - d / d;
    print("Precedence test: %d + %d * %d - %d / %d = %d\n", a, b, c, d, d, precedence_result);
    
    // Complex expression with parentheses: (a + b) * (c - d)
    // Should be: (10 + 5) * (3 - 2) = 15 * 1 = 15
    let complex_result: i32 = (a + b) * (c - d);
    print("Complex expression: (%d + %d) * (%d - %d) = %d\n", a, b, c, d, complex_result);
    
    print("\n");
    
    // ============= COMPARISON OPERATORS TEST =============
    print("3. TESTING COMPARISON OPERATORS:\n");
    
    let x: i32 = 10;
    let y: i32 = 20;
    let z: i32 = 10;
    
    print("Variables: x=%d, y=%d, z=%d\n", x, y, z);
    
    // ============= IF/ELSE CONTROL FLOW TEST =============
    print("4. TESTING IF/ELSE CONTROL FLOW:\n");
    
    // Simple if test
    print("Testing simple if (x == z):\n");
    if (x == z) {
        print("âœ“ PASS: x equals z\n");
    }
    
    // If-else test
    print("Testing if-else (x < y):\n");
    if (x < y) {
        print("âœ“ PASS: x is less than y\n");
    } else {
        print("âœ— FAIL: x should be less than y\n");
    }
    
    // If-else test (false condition)
    print("Testing if-else (x > y):\n");
    if (x > y) {
        print("âœ— FAIL: x should not be greater than y\n");
    } else {
        print("âœ“ PASS: x is not greater than y\n");
    }
    
    // If-else if-else test (using nested else)
    print("Testing if-else if-else chain:\n");
    let test_val: i32 = 15;
    print("test_val = %d\n", test_val);
    
    if (test_val < 10) {
        print("test_val is less than 10\n");
    } else {
        if (test_val < 20) {
            print("âœ“ PASS: test_val is between 10 and 19\n");
        } else {
            print("test_val is 20 or greater\n");
        }
    }
    
    // Nested if test
    print("Testing nested if statements:\n");
    let outer_val: i32 = 5;
    let inner_val: i32 = 3;
    
    if (outer_val > 0) {
        print("Outer condition passed (outer_val > 0)\n");
        if (inner_val > 0) {
            print("âœ“ PASS: Inner condition also passed (inner_val > 0)\n");
        } else {
            print("Inner condition failed\n");
        }
    } else {
        print("Outer condition failed\n");
    }
    
    print("\n");
    
    // ============= FINAL SUMMARY =============
    print("=== TEST SUMMARY ===\n");
    print("âœ… I/O Operations: All data types read and stored\n");
    print("âœ… Arithmetic Operators: +, -, *, /, %% working\n");
    print("âœ… Operator Precedence: Correct evaluation order\n");
    print("âœ… Comparison Operators: ==, <, > working\n");
    print("âœ… Control Flow: if, else, else-if working\n");
    print("âœ… Nested Structures: Nested if statements working\n");
    print("\nðŸŽ‰ ALL COMPREHENSIVE TESTS COMPLETED! ðŸŽ‰\n");
}
