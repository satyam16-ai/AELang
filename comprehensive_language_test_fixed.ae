// ÆLang Comprehensive Language Test
// Tests ALL ACTUALLY IMPLEMENTED language features
// This program demonstrates every working aspect of the ÆLang language

// ========================================
// 1. EXTERNAL FUNCTION DECLARATIONS
// ========================================

extern print(message: string);
extern print_int(val: i32);
extern print_float(val: f32);
extern read_int(): i32;
extern read_float(): f32;

// ========================================
// 2. CONSTANT DECLARATIONS
// ========================================

const PI: f32 = 3.14159;
const MAX_SIZE: i32 = 100;
const ZERO: i32 = 0;
const ONE: i32 = 1;
const NEGATIVE: i32 = -42;
const LARGE_NUM: i32 = 999999;

// ========================================
// 3. BASIC ARITHMETIC FUNCTIONS
// ========================================

func add(a: i32, b: i32): i32 {
    return a + b;
}

func subtract(a: i32, b: i32): i32 {
    return a - b;
}

func multiply(a: i32, b: i32): i32 {
    return a * b;
}

func divide(a: i32, b: i32): i32 {
    if b == 0 {
        print_int(99999); // Error code for division by zero
        return 0;
    }
    return a / b;
}

func modulo(a: i32, b: i32): i32 {
    if b == 0 {
        print_int(88888); // Error code for modulo by zero
        return 0;
    }
    return a % b;
}

func float_add(a: f32, b: f32): f32 {
    return a + b;
}

func float_subtract(a: f32, b: f32): f32 {
    return a - b;
}

func float_multiply(a: f32, b: f32): f32 {
    return a * b;
}

func float_divide(a: f32, b: f32): f32 {
    return a / b;
}

// ========================================
// 4. COMPARISON FUNCTIONS
// ========================================

func is_equal(a: i32, b: i32): i32 {
    if a == b {
        return 1;
    }
    return 0;
}

func is_not_equal(a: i32, b: i32): i32 {
    if a != b {
        return 1;
    }
    return 0;
}

func is_greater(a: i32, b: i32): i32 {
    if a > b {
        return 1;
    }
    return 0;
}

func is_less(a: i32, b: i32): i32 {
    if a < b {
        return 1;
    }
    return 0;
}

func is_greater_equal(a: i32, b: i32): i32 {
    if a >= b {
        return 1;
    }
    return 0;
}

func is_less_equal(a: i32, b: i32): i32 {
    if a <= b {
        return 1;
    }
    return 0;
}

// ========================================
// 5. MATHEMATICAL UTILITY FUNCTIONS
// ========================================

func absolute(x: i32): i32 {
    if x < 0 {
        return -x;
    }
    return x;
}

func max(a: i32, b: i32): i32 {
    if a > b {
        return a;
    }
    return b;
}

func min(a: i32, b: i32): i32 {
    if a < b {
        return a;
    }
    return b;
}

func sign(x: i32): i32 {
    if x > 0 {
        return 1;
    }
    if x < 0 {
        return -1;
    }
    return 0;
}

// ========================================
// 6. RECURSIVE FUNCTIONS
// ========================================

func factorial(n: i32): i32 {
    if n <= 1 {
        return 1;
    }
    return n * factorial(n - 1);
}

func fibonacci(n: i32): i32 {
    if n <= 1 {
        return n;
    }
    return fibonacci(n - 1) + fibonacci(n - 2);
}

func gcd(a: i32, b: i32): i32 {
    if b == 0 {
        return a;
    }
    return gcd(b, a % b);
}

// ========================================
// 7. ITERATIVE FUNCTIONS WITH WHILE LOOPS
// ========================================

func power(base: i32, exp: i32): i32 {
    if exp == 0 {
        return 1;
    }
    
    let result: i32 = 1;
    let counter: i32 = 0;
    
    while counter < exp {
        result = result * base;
        counter = counter + 1;
    }
    
    return result;
}

func sum_to_n(n: i32): i32 {
    let sum: i32 = 0;
    let i: i32 = 1;
    
    while i <= n {
        sum = sum + i;
        i = i + 1;
    }
    
    return sum;
}

func count_digits(n: i32): i32 {
    let count: i32 = 0;
    let num: i32 = absolute(n);
    
    if num == 0 {
        return 1;
    }
    
    while num > 0 {
        num = num / 10;
        count = count + 1;
    }
    
    return count;
}

func reverse_number(n: i32): i32 {
    let reversed: i32 = 0;
    let num: i32 = absolute(n);
    
    while num > 0 {
        reversed = reversed * 10 + (num % 10);
        num = num / 10;
    }
    
    return reversed;
}

func sum_of_digits(n: i32): i32 {
    let sum: i32 = 0;
    let num: i32 = absolute(n);
    
    while num > 0 {
        sum = sum + (num % 10);
        num = num / 10;
    }
    
    return sum;
}

// ========================================
// 8. ADVANCED ALGORITHMS
// ========================================

func is_prime(n: i32): i32 {
    if n <= 1 {
        return 0;
    }
    if n <= 3 {
        return 1;
    }
    if modulo(n, 2) == 0 {
        return 0;
    }
    
    let i: i32 = 3;
    while i * i <= n {
        if modulo(n, i) == 0 {
            return 0;
        }
        i = i + 2;
    }
    return 1;
}

func lcm(a: i32, b: i32): i32 {
    let gcd_result: i32 = gcd(a, b);
    return (a * b) / gcd_result;
}

func is_perfect_square(n: i32): i32 {
    if n < 0 {
        return 0;
    }
    
    let i: i32 = 1;
    while i * i <= n {
        if i * i == n {
            return 1;
        }
        i = i + 1;
    }
    return 0;
}

// ========================================
// 9. FLOATING POINT OPERATIONS
// ========================================

func circle_area(radius: f32): f32 {
    return PI * radius * radius;
}

func circle_circumference(radius: f32): f32 {
    return 2.0 * PI * radius;
}

func rectangle_area(width: f32, height: f32): f32 {
    return width * height;
}

func triangle_area(base: f32, height: f32): f32 {
    return 0.5 * base * height;
}

func sphere_volume(radius: f32): f32 {
    return 4.0 / 3.0 * PI * radius * radius * radius;
}

// ========================================
// 10. COMPLEX NESTED EXPRESSIONS
// ========================================

func complex_calculation(x: i32, y: i32): i32 {
    // Tests nested function calls and complex expressions
    let part1: i32 = add(multiply(x, y), subtract(power(x, 2), absolute(y)));
    let part2: i32 = max(x * 2, y * 3);
    return max(part1, part2);
}

func nested_conditionals(a: i32, b: i32, c: i32): i32 {
    // Find maximum of three numbers using nested if statements
    if a > b {
        if a > c {
            return a;
        } else {
            return c;
        }
    } else {
        if b > c {
            return b;
        } else {
            return c;
        }
    }
}

func bubble_sort_three_values(a: i32, b: i32, c: i32): void {
    print("Original values:");
    print_int(a);
    print_int(b);
    print_int(c);
    
    let x: i32 = a;
    let y: i32 = b;
    let z: i32 = c;
    
    // Bubble sort algorithm for three values
    if x > y {
        let temp: i32 = x;
        x = y;
        y = temp;
    }
    
    if y > z {
        let temp: i32 = y;
        y = z;
        z = temp;
    }
    
    if x > y {
        let temp: i32 = x;
        x = y;
        y = temp;
    }
    
    print("Sorted values:");
    print_int(x);
    print_int(y);
    print_int(z);
}

// ========================================
// 11. TEST RUNNER FUNCTIONS
// ========================================

func test_arithmetic(): void {
    print("=== ARITHMETIC TESTS ===");
    
    print("Testing addition:");
    print_int(add(15, 25));
    
    print("Testing subtraction:");
    print_int(subtract(50, 20));
    
    print("Testing multiplication:");
    print_int(multiply(6, 7));
    
    print("Testing division:");
    print_int(divide(84, 12));
    
    print("Testing modulo:");
    print_int(modulo(17, 5));
    
    print("Testing division by zero protection:");
    print_int(divide(10, 0));
    
    print("Arithmetic tests complete!");
}

func test_comparisons(): void {
    print("=== COMPARISON TESTS ===");
    
    print("Testing equality (5 == 5):");
    print_int(is_equal(5, 5));
    
    print("Testing inequality (5 != 3):");
    print_int(is_not_equal(5, 3));
    
    print("Testing greater than (10 > 5):");
    print_int(is_greater(10, 5));
    
    print("Testing less than (3 < 8):");
    print_int(is_less(3, 8));
    
    print("Testing greater or equal (5 >= 5):");
    print_int(is_greater_equal(5, 5));
    
    print("Testing less or equal (3 <= 7):");
    print_int(is_less_equal(3, 7));
    
    print("Comparison tests complete!");
}

func test_mathematical_functions(): void {
    print("=== MATHEMATICAL FUNCTION TESTS ===");
    
    print("Testing absolute value of -15:");
    print_int(absolute(-15));
    
    print("Testing max(20, 35):");
    print_int(max(20, 35));
    
    print("Testing min(20, 35):");
    print_int(min(20, 35));
    
    print("Testing sign(-42):");
    print_int(sign(-42));
    
    print("Testing sign(0):");
    print_int(sign(0));
    
    print("Testing sign(42):");
    print_int(sign(42));
    
    print("Mathematical function tests complete!");
}

func test_recursive_functions(): void {
    print("=== RECURSIVE FUNCTION TESTS ===");
    
    print("Testing factorial(5):");
    print_int(factorial(5));
    
    print("Testing fibonacci(8):");
    print_int(fibonacci(8));
    
    print("Testing gcd(48, 18):");
    print_int(gcd(48, 18));
    
    print("Recursive function tests complete!");
}

func test_iterative_functions(): void {
    print("=== ITERATIVE FUNCTION TESTS ===");
    
    print("Testing power(2, 10):");
    print_int(power(2, 10));
    
    print("Testing sum_to_n(10):");
    print_int(sum_to_n(10));
    
    print("Testing count_digits(12345):");
    print_int(count_digits(12345));
    
    print("Testing reverse_number(12345):");
    print_int(reverse_number(12345));
    
    print("Testing sum_of_digits(12345):");
    print_int(sum_of_digits(12345));
    
    print("Iterative function tests complete!");
}

func test_advanced_algorithms(): void {
    print("=== ADVANCED ALGORITHM TESTS ===");
    
    print("Testing is_prime(17):");
    print_int(is_prime(17));
    
    print("Testing is_prime(15):");
    print_int(is_prime(15));
    
    print("Testing lcm(12, 18):");
    print_int(lcm(12, 18));
    
    print("Testing is_perfect_square(16):");
    print_int(is_perfect_square(16));
    
    print("Testing is_perfect_square(15):");
    print_int(is_perfect_square(15));
    
    print("Advanced algorithm tests complete!");
}

func test_floating_point(): void {
    print("=== FLOATING POINT TESTS ===");
    
    print("Testing float addition (3.5 + 2.5):");
    print_float(float_add(3.5, 2.5));
    
    print("Testing float multiplication (PI * 2):");
    print_float(float_multiply(PI, 2.0));
    
    print("Testing circle area (radius = 5.0):");
    print_float(circle_area(5.0));
    
    print("Testing circle circumference (radius = 5.0):");
    print_float(circle_circumference(5.0));
    
    print("Testing rectangle area (4.0 x 6.0):");
    print_float(rectangle_area(4.0, 6.0));
    
    print("Testing triangle area (base=10.0, height=8.0):");
    print_float(triangle_area(10.0, 8.0));
    
    print("Testing sphere volume (radius = 3.0):");
    print_float(sphere_volume(3.0));
    
    print("Floating point tests complete!");
}

func test_complex_expressions(): void {
    print("=== COMPLEX EXPRESSION TESTS ===");
    
    print("Testing complex calculation (5, 3):");
    print_int(complex_calculation(5, 3));
    
    print("Testing nested conditionals - max of (10, 20, 15):");
    print_int(nested_conditionals(10, 20, 15));
    
    print("Testing bubble sort on (30, 10, 20):");
    bubble_sort_three_values(30, 10, 20);
    
    print("Complex expression tests complete!");
}

func test_control_flow(): void {
    print("=== CONTROL FLOW TESTS ===");
    
    print("Testing if-else with true condition:");
    if 10 > 5 {
        print("Condition is true!");
    } else {
        print("Condition is false!");
    }
    
    print("Testing if-else with false condition:");
    if 3 > 8 {
        print("This should not print");
    } else {
        print("Else branch executed!");
    }
    
    print("Testing while loop (count to 5):");
    let counter: i32 = 1;
    while counter <= 5 {
        print_int(counter);
        counter = counter + 1;
    }
    
    print("Testing nested while loops:");
    let i: i32 = 1;
    while i <= 3 {
        let j: i32 = 1;
        while j <= 2 {
            let result: i32 = i * 10 + j;
            print_int(result);
            j = j + 1;
        }
        i = i + 1;
    }
    
    print("Control flow tests complete!");
}

func test_constants(): void {
    print("=== CONSTANT TESTS ===");
    
    print("PI constant:");
    print_float(PI);
    
    print("MAX_SIZE constant:");
    print_int(MAX_SIZE);
    
    print("ZERO constant:");
    print_int(ZERO);
    
    print("ONE constant:");
    print_int(ONE);
    
    print("NEGATIVE constant:");
    print_int(NEGATIVE);
    
    print("LARGE_NUM constant:");
    print_int(LARGE_NUM);
    
    print("Constant tests complete!");
}

// ========================================
// 12. MAIN FUNCTION - COMPREHENSIVE TEST RUNNER
// ========================================

func main(): void {
    print("========================================");
    print("ÆLang Comprehensive Language Test Suite");
    print("Testing ALL implemented language features");
    print("========================================");
    
    // Run all test suites
    test_constants();
    test_arithmetic();
    test_comparisons();
    test_mathematical_functions();
    test_recursive_functions();
    test_iterative_functions();
    test_advanced_algorithms();
    test_floating_point();
    test_complex_expressions();
    test_control_flow();
    
    print("========================================");
    print("INTERACTIVE TESTING SECTION");
    print("========================================");
    
    print("Enter two integers for interactive testing:");
    print("First number:");
    let user_a: i32 = read_int();
    print("Second number:");
    let user_b: i32 = read_int();
    
    print("You entered:");
    print_int(user_a);
    print_int(user_b);
    
    print("Results:");
    print("Addition:");
    print_int(add(user_a, user_b));
    
    print("Multiplication:");
    print_int(multiply(user_a, user_b));
    
    print("Maximum:");
    print_int(max(user_a, user_b));
    
    print("GCD:");
    print_int(gcd(user_a, user_b));
    
    print("LCM:");
    print_int(lcm(user_a, user_b));
    
    print("First number is prime:");
    print_int(is_prime(user_a));
    
    print("Second number is prime:");
    print_int(is_prime(user_b));
    
    print("========================================");
    print("FLOATING POINT INTERACTIVE TEST");
    print("========================================");
    
    print("Enter a radius for circle calculations:");
    let radius: f32 = read_float();
    
    print("Radius entered:");
    print_float(radius);
    
    print("Circle area:");
    print_float(circle_area(radius));
    
    print("Circle circumference:");
    print_float(circle_circumference(radius));
    
    print("Sphere volume:");
    print_float(sphere_volume(radius));
    
    print("========================================");
    print("TEST SUITE COMPLETE!");
    print("========================================");
    
    print("ÆLang features successfully tested:");
    print("✓ External function declarations");
    print("✓ Constant declarations (i32, f32)");
    print("✓ Variable declarations (let)");
    print("✓ Function definitions with parameters");
    print("✓ Integer arithmetic (+, -, *, /, %)");
    print("✓ Float arithmetic (+, -, *, /)");
    print("✓ Comparison operators (==, !=, <, >, <=, >=)");
    print("✓ Conditional statements (if-else)");
    print("✓ While loops");
    print("✓ Nested control structures");
    print("✓ Function calls (simple and nested)");
    print("✓ Recursive functions");
    print("✓ Complex expressions");
    print("✓ Type system (i32, f32, void)");
    print("✓ Scope and variable management");
    print("✓ Interactive input/output");
    print("✓ Mathematical algorithms");
    print("✓ All compiler optimization opportunities");
    
    print("All implemented ÆLang language features work correctly!");
}
