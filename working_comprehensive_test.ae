// ÆLang Comprehensive Language Test
// Tests ALL ACTUALLY IMPLEMENTED language features

// ========================================
// 1. EXTERNAL FUNCTION DECLARATIONS  
// ========================================

extern print_int(val: i32);
extern print_float(val: f32);
extern read_int(): i32;
extern read_float(): f32;

// ========================================
// 2. CONSTANT DECLARATIONS
// ========================================

const PI: f32 = 3.14159;
const MAX_SIZE: i32 = 100;
const ZERO: i32 = 0;
const ONE: i32 = 1;
const NEGATIVE: i32 = -42;

// ========================================
// 3. BASIC UTILITY FUNCTIONS
// ========================================

func add(a: i32, b: i32): i32 {
    return a + b;
}

func subtract(a: i32, b: i32): i32 {
    return a - b;
}

func multiply(a: i32, b: i32): i32 {
    return a * b;
}

func divide(a: i32, b: i32): i32 {
    if b == 0 {
        print_int(99999); // Error code
        return 0;
    }
    return a / b;
}

func float_add(a: f32, b: f32): f32 {
    return a + b;
}

func float_multiply(a: f32, b: f32): f32 {
    return a * b;
}

// ========================================
// 4. COMPARISON FUNCTIONS
// ========================================

func is_equal(a: i32, b: i32): i32 {
    if a == b {
        return 1;
    }
    return 0;
}

func is_greater(a: i32, b: i32): i32 {
    if a > b {
        return 1;
    }
    return 0;
}

func is_less(a: i32, b: i32): i32 {
    if a < b {
        return 1;
    }
    return 0;
}

// ========================================
// 5. MATHEMATICAL FUNCTIONS
// ========================================

func absolute(x: i32): i32 {
    if x < 0 {
        return -x;
    }
    return x;
}

func max(a: i32, b: i32): i32 {
    if a > b {
        return a;
    }
    return b;
}

func min(a: i32, b: i32): i32 {
    if a < b {
        return a;
    }
    return b;
}

func factorial(n: i32): i32 {
    if n <= 1 {
        return 1;
    }
    return n * factorial(n - 1);
}

func power(base: i32, exp: i32): i32 {
    if exp == 0 {
        return 1;
    }
    if exp == 1 {
        return base;
    }
    
    let result: i32 = 1;
    let counter: i32 = 0;
    
    while counter < exp {
        result = result * base;
        counter = counter + 1;
    }
    
    return result;
}

// ========================================
// 6. COMPLEX ALGORITHMS
// ========================================

func gcd(a: i32, b: i32): i32 {
    while b != 0 {
        let temp: i32 = b;
        b = a % b;
        a = temp;
    }
    return a;
}

func is_prime(n: i32): i32 {
    if n <= 1 {
        return 0;
    }
    if n <= 3 {
        return 1;
    }
    if n % 2 == 0 {
        return 0;
    }
    
    let i: i32 = 3;
    while i * i <= n {
        if n % i == 0 {
            return 0;
        }
        i = i + 2;
    }
    return 1;
}

// ========================================
// 7. FLOATING POINT OPERATIONS
// ========================================

func circle_area(radius: f32): f32 {
    return PI * radius * radius;
}

func rectangle_area(width: f32, height: f32): f32 {
    return width * height;
}

// ========================================
// 8. MAIN FUNCTION - COMPREHENSIVE TEST
// ========================================

func main(): void {
    print("=== ÆLang Comprehensive Test Suite ===");
    
    print("Testing constants:");
    print_int(MAX_SIZE);
    print_float(PI);
    print_int(NEGATIVE);
    
    print("Testing arithmetic:");
    print("5 + 3 =");
    print_int(add(5, 3));
    print("10 - 4 =");
    print_int(subtract(10, 4));
    print("6 * 7 =");
    print_int(multiply(6, 7));
    print("15 / 3 =");
    print_int(divide(15, 3));
    
    print("Testing comparisons:");
    print("5 == 5:");
    print_int(is_equal(5, 5));
    print("10 > 5:");
    print_int(is_greater(10, 5));
    print("3 < 8:");
    print_int(is_less(3, 8));
    
    print("Testing mathematical functions:");
    print("abs(-15) =");
    print_int(absolute(-15));
    print("max(10, 20) =");
    print_int(max(10, 20));
    print("min(10, 20) =");
    print_int(min(10, 20));
    print("factorial(5) =");
    print_int(factorial(5));
    print("power(2, 3) =");
    print_int(power(2, 3));
    
    print("Testing algorithms:");
    print("gcd(48, 18) =");
    print_int(gcd(48, 18));
    print("is_prime(17) =");
    print_int(is_prime(17));
    print("is_prime(4) =");
    print_int(is_prime(4));
    
    print("Testing floating point:");
    let radius: f32 = 5.0;
    let area: f32 = circle_area(radius);
    print("Circle area (radius=5):");
    print_float(area);
    
    let rect_area: f32 = rectangle_area(4.0, 6.0);
    print("Rectangle area (4x6):");
    print_float(rect_area);
    
    print("Testing variables and control flow:");
    let test_val: i32 = 10;
    
    if test_val > 5 {
        print("If condition works!");
    } else {
        print("If condition failed!");
    }
    
    print("While loop test (counting 1 to 5):");
    let counter: i32 = 1;
    while counter <= 5 {
        print_int(counter);
        counter = counter + 1;
    }
    
    print("Testing nested control structures:");
    let i: i32 = 1;
    while i <= 3 {
        let j: i32 = 1;
        while j <= 2 {
            print_int(i * 10 + j);
            j = j + 1;
        }
        i = i + 1;
    }
    
    print("Interactive test - Enter two integers:");
    let user_a: i32 = read_int();
    let user_b: i32 = read_int();
    
    print("You entered:");
    print_int(user_a);
    print_int(user_b);
    
    print("Sum:");
    print_int(add(user_a, user_b));
    print("Product:");
    print_int(multiply(user_a, user_b));
    print("Maximum:");
    print_int(max(user_a, user_b));
    print("GCD:");
    print_int(gcd(user_a, user_b));
    
    print("=== ALL TESTS COMPLETED ===");
    print("Features tested:");
    print("✓ External function declarations");
    print("✓ Constants (i32, f32)"); 
    print("✓ Variables (let declarations)");
    print("✓ Function definitions");
    print("✓ Integer arithmetic (+, -, *, /, %)");
    print("✓ Float arithmetic");
    print("✓ Comparisons (==, !=, <, >, <=, >=)");
    print("✓ If-else statements");
    print("✓ While loops");
    print("✓ Nested control structures");
    print("✓ Function calls and recursion");
    print("✓ Complex expressions");
    print("✓ Interactive I/O");
    print("ÆLang comprehensive test successful!");
}
