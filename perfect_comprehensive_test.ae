// ÆLang Complete Feature Test
// Tests ALL currently working features based on actual implementation
// Updated after reviewing documentation and testing actual compiler

// ========================================
// EXTERNAL FUNCTION DECLARATIONS
// ========================================

extern print(message: str);
extern print_int(val: i32);
extern print_float(val: f32);
extern read_int(): i32;
extern read_float(): f32;

// ========================================
// BASIC ARITHMETIC FUNCTIONS
// ========================================

func add(a: i32, b: i32): i32 {
    return a + b;
}

func subtract(a: i32, b: i32): i32 {
    return a - b;
}

func multiply(a: i32, b: i32): i32 {
    return a * b;
}

func divide(a: i32, b: i32): i32 {
    if (b == 0) {
        print("Error: Division by zero!");
        return 0;
    }
    return a / b;
}

func modulo(a: i32, b: i32): i32 {
    return a % b;
}

// ========================================
// FLOATING POINT FUNCTIONS
// ========================================

func float_add(a: f32, b: f32): f32 {
    return a + b;
}

func float_multiply(a: f32, b: f32): f32 {
    return a * b;
}

func float_divide(a: f32, b: f32): f32 {
    return a / b;
}

// ========================================
// COMPARISON FUNCTIONS
// ========================================

func is_equal(a: i32, b: i32): bool {
    return a == b;
}

func is_not_equal(a: i32, b: i32): bool {
    return a != b;
}

func is_greater(a: i32, b: i32): bool {
    return a > b;
}

func is_less(a: i32, b: i32): bool {
    return a < b;
}

func is_greater_equal(a: i32, b: i32): bool {
    return a >= b;
}

func is_less_equal(a: i32, b: i32): bool {
    return a <= b;
}

// ========================================
// MATHEMATICAL UTILITY FUNCTIONS
// ========================================

func absolute(x: i32): i32 {
    if (x < 0) {
        return -x;
    }
    return x;
}

func max(a: i32, b: i32): i32 {
    if (a > b) {
        return a;
    }
    return b;
}

func min(a: i32, b: i32): i32 {
    if (a < b) {
        return a;
    }
    return b;
}

func sign(x: i32): i32 {
    if (x > 0) {
        return 1;
    }
    if (x < 0) {
        return -1;
    }
    return 0;
}

// ========================================
// RECURSIVE FUNCTIONS
// ========================================

func factorial(n: i32): i32 {
    if (n <= 1) {
        return 1;
    }
    return n * factorial(n - 1);
}

func fibonacci(n: i32): i32 {
    if (n <= 1) {
        return n;
    }
    return fibonacci(n - 1) + fibonacci(n - 2);
}

func power(base: i32, exp: i32): i32 {
    if (exp == 0) {
        return 1;
    }
    if (exp == 1) {
        return base;
    }
    return base * power(base, exp - 1);
}

// ========================================
// BOOLEAN LOGIC FUNCTIONS
// ========================================

func test_boolean_operations(): void {
    let flag1: bool = true;
    let flag2: bool = false;
    
    print("=== Boolean Type Tests ===");
    print("Testing boolean variables:");
    
    if (flag1) {
        print("flag1 is true ✓");
    }
    
    if (flag2) {
        print("flag2 is true");
    } else {
        print("flag2 is false ✓");
    }
}

// ========================================
// STRING HANDLING FUNCTIONS
// ========================================

func test_string_operations(): void {
    let message: str = "Hello, ÆLang!";
    let greeting: str = "Welcome to our language";
    let empty: str = "";
    
    print("=== String Type Tests ===");
    print(message);
    print(greeting);
    print(empty);
    print("String literals work perfectly!");
}

// ========================================
// NESTED CONTROL FLOW
// ========================================

func test_nested_conditions(): void {
    let score: i32 = 85;
    
    print("=== Nested Control Flow Tests ===");
    print("Testing grade calculation:");
    
    if (score >= 90) {
        print("Grade: A");
    } else {
        if (score >= 80) {
            print("Grade: B");
        } else {
            if (score >= 70) {
                print("Grade: C");
            } else {
                if (score >= 60) {
                    print("Grade: D");
                } else {
                    print("Grade: F");
                }
            }
        }
    }
}

// ========================================
// VARIABLE SCOPE TESTING
// ========================================

func test_variable_scope(): void {
    let outer: i32 = 100;
    
    print("=== Variable Scope Tests ===");
    print("Outer variable:");
    print_int(outer);
    
    if (outer > 50) {
        let inner: i32 = 200;
        print("Inner variable:");
        print_int(inner);
        
        let modified_outer: i32 = outer + inner;
        print("Modified outer + inner:");
        print_int(modified_outer);
    }
    
    print("Back to outer scope:");
    print_int(outer);
}

// ========================================
// COMPREHENSIVE TESTING FUNCTION
// ========================================

func run_all_tests(): void {
    print("=== ÆLang Complete Feature Test Suite ===");
    print("");
    
    // Test 1: Basic arithmetic
    print("1. ARITHMETIC OPERATIONS");
    print("5 + 3 =");
    print_int(add(5, 3));
    print("10 - 4 =");
    print_int(subtract(10, 4));
    print("6 * 7 =");
    print_int(multiply(6, 7));
    print("15 / 3 =");
    print_int(divide(15, 3));
    print("17 % 5 =");
    print_int(modulo(17, 5));
    print("");
    
    // Test 2: Floating point
    print("2. FLOATING POINT OPERATIONS");
    print("3.14 + 2.86 =");
    print_float(float_add(3.14, 2.86));
    print("5.5 * 2.0 =");
    print_float(float_multiply(5.5, 2.0));
    print("10.0 / 4.0 =");
    print_float(float_divide(10.0, 4.0));
    print("");
    
    // Test 3: Comparisons
    print("3. COMPARISON OPERATIONS");
    print("5 == 5:");
    if (is_equal(5, 5)) {
        print("TRUE ✓");
    } else {
        print("FALSE");
    }
    print("10 > 5:");
    if (is_greater(10, 5)) {
        print("TRUE ✓");
    } else {
        print("FALSE");
    }
    print("3 <= 7:");
    if (is_less_equal(3, 7)) {
        print("TRUE ✓");
    } else {
        print("FALSE");
    }
    print("");
    
    // Test 4: Mathematical functions
    print("4. MATHEMATICAL FUNCTIONS");
    print("abs(-15) =");
    print_int(absolute(-15));
    print("max(10, 20) =");
    print_int(max(10, 20));
    print("min(10, 20) =");
    print_int(min(10, 20));
    print("sign(-5) =");
    print_int(sign(-5));
    print("factorial(5) =");
    print_int(factorial(5));
    print("fibonacci(7) =");
    print_int(fibonacci(7));
    print("power(2, 4) =");
    print_int(power(2, 4));
    print("");
    
    // Test 5: Boolean operations
    test_boolean_operations();
    print("");
    
    // Test 6: String operations
    test_string_operations();
    print("");
    
    // Test 7: Nested conditions
    test_nested_conditions();
    print("");
    
    // Test 8: Variable scope
    test_variable_scope();
    print("");
}

// ========================================
// INTERACTIVE TESTING
// ========================================

func interactive_calculator(): void {
    print("=== Interactive Calculator ===");
    print("Enter two numbers:");
    
    print("First number:");
    let a: i32 = read_int();
    
    print("Second number:");
    let b: i32 = read_int();
    
    print("You entered:");
    print_int(a);
    print_int(b);
    print("");
    
    print("Results:");
    print("Addition:");
    print_int(add(a, b));
    
    print("Subtraction:");
    print_int(subtract(a, b));
    
    print("Multiplication:");
    print_int(multiply(a, b));
    
    print("Division:");
    print_int(divide(a, b));
    
    print("Maximum:");
    print_int(max(a, b));
    
    print("Factorial of first number:");
    if (a >= 0 && a <= 10) {
        print_int(factorial(a));
    } else {
        print("Number too large for factorial");
    }
}

// ========================================
// MAIN FUNCTION - ENTRY POINT
// ========================================

func main(): void {
    print("╔══════════════════════════════════════╗");
    print("║     ÆLang Complete Language Test     ║");
    print("║    All Currently Working Features    ║");
    print("╚══════════════════════════════════════╝");
    print("");
    
    // Run all automated tests
    run_all_tests();
    
    // Feature summary
    print("=== FEATURE SUMMARY ===");
    print("✓ Data Types: i32, f32, str, bool");
    print("✓ Variables: let declarations");
    print("✓ Functions: parameters & return types");
    print("✓ External functions: extern declarations");
    print("✓ Arithmetic: +, -, *, /, %");
    print("✓ Comparisons: ==, !=, <, >, <=, >=");
    print("✓ Control flow: if/else statements");
    print("✓ Recursion: factorial, fibonacci");
    print("✓ Variable scope: block scoping");
    print("✓ String literals: immutable strings");
    print("✓ Boolean values: true/false");
    print("✓ Interactive I/O: read_int, read_float");
    print("✓ Output functions: print, print_int, print_float");
    print("");
    
    print("=== INTERACTIVE TEST ===");
    print("Now testing interactive input...");
    interactive_calculator();
    
    print("");
    print("╔══════════════════════════════════════╗");
    print("║         ALL TESTS COMPLETED         ║");
    print("║     ÆLang is working perfectly!      ║");
    print("╚══════════════════════════════════════╝");
}
